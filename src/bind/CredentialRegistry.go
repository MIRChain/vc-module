// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bind

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ICredentialRegistrySignature is an auto generated low-level Go binding around an user-defined struct.
type ICredentialRegistrySignature struct {
	R [32]byte
	S [32]byte
	V uint8
}

// CredentialRegistryABI is the input ABI used to generate the binding from.
const CredentialRegistryABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"credentialHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iat\",\"type\":\"uint256\"}],\"name\":\"CredentialRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"credentialHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"CredentialRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exits\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"structICredentialRegistry.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"SignatureRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISSUER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"credentials\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_credentialHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"getIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_credentialHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"getSigners\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"signers\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_credentialHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subject\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_credentialHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"registerCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_credentialHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"registerSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_credentialHash\",\"type\":\"bytes32\"}],\"name\":\"revokeCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_credentialHash\",\"type\":\"bytes32\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"verifyIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

var CredentialRegistryParsedABI, _ = abi.JSON(strings.NewReader(CredentialRegistryABI))

// CredentialRegistryBin is the compiled bytecode used for deploying new contracts.
var CredentialRegistryBin = "0x60806040523480156200001157600080fd5b50620000276000801b336200002d60201b60201c565b620001a6565b6200003f82826200004360201b60201c565b5050565b6200005582826200013460201b60201c565b6200013057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620000d56200019e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b612f7980620001b66000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806387cf356e116100a2578063a217fddf11610071578063a217fddf14610351578063ca6eec781461036f578063d547741f1461039f578063d6d76ed5146103bb578063f078e5db146103eb57610116565b806387cf356e146102915780639052944e146102c157806391d14854146102f1578063957839d91461032157610116565b806336568abe116100e957806336568abe146101c7578063448684ac146101e3578063701ee46314610213578063751307471461024357806382aefa241461027357610116565b806301ffc9a71461011b57806306b15df41461014b578063248a9ca31461017b5780632f2ff15d146101ab575b600080fd5b61013560048036038101906101309190612146565b61041f565b604051610142919061218e565b60405180910390f35b6101656004803603810190610160919061223d565b610499565b6040516101729190612299565b60405180910390f35b610195600480360381019061019091906122b4565b6106b6565b6040516101a291906122f0565b60405180910390f35b6101c560048036038101906101c0919061223d565b6106d5565b005b6101e160048036038101906101dc919061223d565b6106f6565b005b6101fd60048036038101906101f89190612370565b610779565b60405161020a919061218e565b60405180910390f35b61022d60048036038101906102289190612525565b6107d4565b60405161023a919061218e565b60405180910390f35b61025d600480360381019061025891906125ca565b610b03565b60405161026a919061218e565b60405180910390f35b61027b610ed4565b60405161028891906122f0565b60405180910390f35b6102ab60048036038101906102a69190612679565b610ef8565b6040516102b8919061218e565b60405180910390f35b6102db60048036038101906102d691906126e5565b610f31565b6040516102e8919061275b565b60405180910390f35b61030b6004803603810190610306919061223d565b610f8c565b604051610318919061218e565b60405180910390f35b61033b6004803603810190610336919061223d565b610ff6565b604051610348919061218e565b60405180910390f35b6103596111ff565b60405161036691906122f0565b60405180910390f35b610389600480360381019061038491906122b4565b611206565b604051610396919061218e565b60405180910390f35b6103b960048036038101906103b4919061223d565b61151a565b005b6103d560048036038101906103d09190612776565b61153b565b6040516103e2919061218e565b60405180910390f35b6104056004803603810190610400919061223d565b611714565b6040516104169594939291906127c5565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104925750610491826117a4565b5b9050919050565b6000806001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561063f578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681525050815260200190600101906105dc565b5050505081526020016005820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146106aa578060800151519150506106b0565b60009150505b92915050565b6000806000838152602001908152602001600020600101549050919050565b6106de826106b6565b6106e78161180e565b6106f18383611822565b505050565b6106fe611902565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461076b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107629061289b565b60405180910390fd5b610775828261190a565b5050565b60006107ca858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506119eb565b9050949350505050565b6000806001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561097a578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff168152505081526020019060010190610917565b5050505081526020016005820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0990612907565b60405180910390fd5b600083905060008060006020840151925060408401519150606084015160001a9050600060405180606001604052808581526020018481526020018360ff1681525090506000805b8760800151518160ff16108015610a6f575081155b15610af157826000015188608001518260ff1681518110610a9357610a92612927565b5b602002602001015160000151148015610ad45750826020015188608001518260ff1681518110610ac657610ac5612927565b5b602002602001015160200151145b15610ade57600191505b8080610ae990612985565b915050610a5a565b81985050505050505050509392505050565b6000610b2f7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12233610f8c565b610b6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b65906129fa565b60405180910390fd5b60006001600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4c90612a66565b60405180910390fd5b888160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550878160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085816002018190555084816003018190555060018160050160006101000a81548160ff021916908315150217905550806001600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028201548160020155600382015481600301556004820181600401908054610e53929190612005565b506005820160009054906101000a900460ff168160050160006101000a81548160ff021916908315150217905550905050867f889569e4303664728fba29a472b24d3032707e6ebbee9a46e070c5c8f2ae4c258a8a8460020154604051610ebc93929190612a86565b60405180910390a26001915050979650505050505050565b7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12281565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614905092915050565b600060018585858560405160008152602001604052604051610f569493929190612abd565b6020604051602081039080840390855afa158015610f78573d6000803e3d6000fd5b505050602060405103519050949350505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561119c578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff168152505081526020019060010190611139565b5050505081526020016005820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16141591505092915050565b6000801b81565b6000806001600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e590612b4e565b60405180910390fd5b8060050160009054906101000a900460ff1661133f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133690612bba565b60405180910390fd5b60008160050160006101000a81548160ff021916908315150217905550806001600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820154816003015560048201816004019080546114a5929190612005565b506005820160009054906101000a900460ff168160050160006101000a81548160ff021916908315150217905550905050827f80d4746828447d65eceb938c7f9d85fbeb232fe7819d5209ed452b3940f8904b3342604051611508929190612bda565b60405180910390a26001915050919050565b611523826106b6565b61152c8161180e565b611536838361190a565b505050565b6000806001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156116e1578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff16815250508152602001906001019061167e565b5050505081526020016005820160009054906101000a900460ff16151515158152505090508060a0015191505092915050565b6001602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060050160009054906101000a900460ff16905085565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61181f8161181a611902565b611d17565b50565b61182c8282610f8c565b6118fe57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506118a3611902565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6119148282610f8c565b156119e757600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061198c611902565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000611a177f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12233610f8c565b611a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4d906129fa565b60405180910390fd5b60006001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611b3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3490612907565b60405180910390fd5b600083905060008060006020840151925060408401519150606084015160001a9050600060405180606001604052808581526020018481526020018360ff1681525090506000805b87600401805490508160ff16108015611b9c575081155b15611c28578260000151886004018260ff1681548110611bbf57611bbe612927565b5b906000526020600020906003020160000154148015611c0b57508260200151886004018260ff1681548110611bf757611bf6612927565b5b906000526020600020906003020160010154145b15611c1557600191505b8080611c2090612985565b915050611b85565b8115611c3f57600098505050505050505050611d10565b87600401839080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555050507f0ffaced37e4d6f4a46de47c31d21fccaad48817a7da7f346154835a547780ecd8860000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168385604051611cfb93929190612c63565b60405180910390a16001985050505050505050505b9392505050565b611d218282610f8c565b611d9857611d2e81611d9c565b611d3c8360001c6020611dc9565b604051602001611d4d929190612da3565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8f9190612e16565b60405180910390fd5b5050565b6060611dc28273ffffffffffffffffffffffffffffffffffffffff16601460ff16611dc9565b9050919050565b606060006002836002611ddc9190612e38565b611de69190612e7a565b67ffffffffffffffff811115611dff57611dfe6123fa565b5b6040519080825280601f01601f191660200182016040528015611e315781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611e6957611e68612927565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ecd57611ecc612927565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611f0d9190612e38565b611f179190612e7a565b90505b6001811115611fb7577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611f5957611f58612927565b5b1a60f81b828281518110611f7057611f6f612927565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611fb090612eae565b9050611f1a565b5060008414611ffb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff290612f23565b60405180910390fd5b8091505092915050565b82805482825590600052602060002090600302810192821561208e5760005260206000209160030282015b8281111561208d57828260008201548160000155600182015481600101556002820160009054906101000a900460ff168160020160006101000a81548160ff021916908360ff160217905550505091600301919060030190612030565b5b50905061209b919061209f565b5090565b5b808211156120d65760008082016000905560018201600090556002820160006101000a81549060ff0219169055506003016120a0565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612123816120ee565b811461212e57600080fd5b50565b6000813590506121408161211a565b92915050565b60006020828403121561215c5761215b6120e4565b5b600061216a84828501612131565b91505092915050565b60008115159050919050565b61218881612173565b82525050565b60006020820190506121a3600083018461217f565b92915050565b6000819050919050565b6121bc816121a9565b81146121c757600080fd5b50565b6000813590506121d9816121b3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061220a826121df565b9050919050565b61221a816121ff565b811461222557600080fd5b50565b60008135905061223781612211565b92915050565b60008060408385031215612254576122536120e4565b5b6000612262858286016121ca565b925050602061227385828601612228565b9150509250929050565b600060ff82169050919050565b6122938161227d565b82525050565b60006020820190506122ae600083018461228a565b92915050565b6000602082840312156122ca576122c96120e4565b5b60006122d8848285016121ca565b91505092915050565b6122ea816121a9565b82525050565b600060208201905061230560008301846122e1565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126123305761232f61230b565b5b8235905067ffffffffffffffff81111561234d5761234c612310565b5b60208301915083600182028301111561236957612368612315565b5b9250929050565b6000806000806060858703121561238a576123896120e4565b5b6000612398878288016121ca565b94505060206123a987828801612228565b935050604085013567ffffffffffffffff8111156123ca576123c96120e9565b5b6123d68782880161231a565b925092505092959194509250565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612432826123e9565b810181811067ffffffffffffffff82111715612451576124506123fa565b5b80604052505050565b60006124646120da565b90506124708282612429565b919050565b600067ffffffffffffffff8211156124905761248f6123fa565b5b612499826123e9565b9050602081019050919050565b82818337600083830152505050565b60006124c86124c384612475565b61245a565b9050828152602081018484840111156124e4576124e36123e4565b5b6124ef8482856124a6565b509392505050565b600082601f83011261250c5761250b61230b565b5b813561251c8482602086016124b5565b91505092915050565b60008060006060848603121561253e5761253d6120e4565b5b600061254c868287016121ca565b935050602061255d86828701612228565b925050604084013567ffffffffffffffff81111561257e5761257d6120e9565b5b61258a868287016124f7565b9150509250925092565b6000819050919050565b6125a781612594565b81146125b257600080fd5b50565b6000813590506125c48161259e565b92915050565b600080600080600080600060c0888a0312156125e9576125e86120e4565b5b60006125f78a828b01612228565b97505060206126088a828b01612228565b96505060406126198a828b016121ca565b955050606061262a8a828b016125b5565b945050608061263b8a828b016125b5565b93505060a088013567ffffffffffffffff81111561265c5761265b6120e9565b5b6126688a828b0161231a565b925092505092959891949750929550565b600080604083850312156126905761268f6120e4565b5b600061269e85828601612228565b92505060206126af85828601612228565b9150509250929050565b6126c28161227d565b81146126cd57600080fd5b50565b6000813590506126df816126b9565b92915050565b600080600080608085870312156126ff576126fe6120e4565b5b600061270d878288016121ca565b945050602061271e878288016126d0565b935050604061272f878288016121ca565b9250506060612740878288016121ca565b91505092959194509250565b612755816121ff565b82525050565b6000602082019050612770600083018461274c565b92915050565b6000806040838503121561278d5761278c6120e4565b5b600061279b85828601612228565b92505060206127ac858286016121ca565b9150509250929050565b6127bf81612594565b82525050565b600060a0820190506127da600083018861274c565b6127e7602083018761274c565b6127f460408301866127b6565b61280160608301856127b6565b61280e608083018461217f565b9695505050505050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000612885602f83612818565b915061289082612829565b604082019050919050565b600060208201905081810360008301526128b481612878565b9050919050565b7f43726564656e7469616c20646f65736e27742065786973747300000000000000600082015250565b60006128f1601983612818565b91506128fc826128bb565b602082019050919050565b60006020820190508181036000830152612920816128e4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129908261227d565b915060ff82036129a3576129a2612956565b5b600182019050919050565b7f43616c6c6572206973206e6f7420612069737375657220320000000000000000600082015250565b60006129e4601883612818565b91506129ef826129ae565b602082019050919050565b60006020820190508181036000830152612a13816129d7565b9050919050565b7f43726564656e7469616c20616c72656164792065786973747300000000000000600082015250565b6000612a50601983612818565b9150612a5b82612a1a565b602082019050919050565b60006020820190508181036000830152612a7f81612a43565b9050919050565b6000606082019050612a9b600083018661274c565b612aa8602083018561274c565b612ab560408301846127b6565b949350505050565b6000608082019050612ad260008301876122e1565b612adf602083018661228a565b612aec60408301856122e1565b612af960608301846122e1565b95945050505050565b7f63726564656e7469616c206861736820646f65736e2774206578697374000000600082015250565b6000612b38601d83612818565b9150612b4382612b02565b602082019050919050565b60006020820190508181036000830152612b6781612b2b565b9050919050565b7f43726564656e7469616c20697320616c7265616479207265766f6b6564000000600082015250565b6000612ba4601d83612818565b9150612baf82612b6e565b602082019050919050565b60006020820190508181036000830152612bd381612b97565b9050919050565b6000604082019050612bef600083018561274c565b612bfc60208301846127b6565b9392505050565b612c0c816121a9565b82525050565b612c1b8161227d565b82525050565b606082016000820151612c376000850182612c03565b506020820151612c4a6020850182612c03565b506040820151612c5d6040850182612c12565b50505050565b600060a082019050612c78600083018661274c565b612c85602083018561217f565b612c926040830184612c21565b949350505050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612cdb601783612c9a565b9150612ce682612ca5565b601782019050919050565b600081519050919050565b60005b83811015612d1a578082015181840152602081019050612cff565b60008484015250505050565b6000612d3182612cf1565b612d3b8185612c9a565b9350612d4b818560208601612cfc565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612d8d601183612c9a565b9150612d9882612d57565b601182019050919050565b6000612dae82612cce565b9150612dba8285612d26565b9150612dc582612d80565b9150612dd18284612d26565b91508190509392505050565b6000612de882612cf1565b612df28185612818565b9350612e02818560208601612cfc565b612e0b816123e9565b840191505092915050565b60006020820190508181036000830152612e308184612ddd565b905092915050565b6000612e4382612594565b9150612e4e83612594565b9250828202612e5c81612594565b91508282048414831517612e7357612e72612956565b5b5092915050565b6000612e8582612594565b9150612e9083612594565b9250828201905080821115612ea857612ea7612956565b5b92915050565b6000612eb982612594565b915060008203612ecc57612ecb612956565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612f0d602083612818565b9150612f1882612ed7565b602082019050919050565b60006020820190508181036000830152612f3c81612f00565b905091905056fea2646970667358221220c0879f3414003f5d6b23fc15c33ce07be0bf445767ea34db919c6ac206ed02c064736f6c63430008120033"

// DeployCredentialRegistry deploys a new Ethereum contract, binding an instance of CredentialRegistry to it.
func DeployCredentialRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CredentialRegistry, error) {
	parsed, err := abi.JSON(strings.NewReader(CredentialRegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CredentialRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CredentialRegistry{CredentialRegistryCaller: CredentialRegistryCaller{contract: contract}, CredentialRegistryTransactor: CredentialRegistryTransactor{contract: contract}, CredentialRegistryFilterer: CredentialRegistryFilterer{contract: contract}}, nil
}

// CredentialRegistry is an auto generated Go binding around an Ethereum contract.
type CredentialRegistry struct {
	CredentialRegistryCaller     // Read-only binding to the contract
	CredentialRegistryTransactor // Write-only binding to the contract
	CredentialRegistryFilterer   // Log filterer for contract events
}

// CredentialRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type CredentialRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CredentialRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CredentialRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CredentialRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CredentialRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CredentialRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CredentialRegistrySession struct {
	Contract     *CredentialRegistry // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// CredentialRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CredentialRegistryCallerSession struct {
	Contract *CredentialRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// CredentialRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CredentialRegistryTransactorSession struct {
	Contract     *CredentialRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// CredentialRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type CredentialRegistryRaw struct {
	Contract *CredentialRegistry // Generic contract binding to access the raw methods on
}

// CredentialRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CredentialRegistryCallerRaw struct {
	Contract *CredentialRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// CredentialRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CredentialRegistryTransactorRaw struct {
	Contract *CredentialRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCredentialRegistry creates a new instance of CredentialRegistry, bound to a specific deployed contract.
func NewCredentialRegistry(address common.Address, backend bind.ContractBackend) (*CredentialRegistry, error) {
	contract, err := bindCredentialRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CredentialRegistry{CredentialRegistryCaller: CredentialRegistryCaller{contract: contract}, CredentialRegistryTransactor: CredentialRegistryTransactor{contract: contract}, CredentialRegistryFilterer: CredentialRegistryFilterer{contract: contract}}, nil
}

// NewCredentialRegistryCaller creates a new read-only instance of CredentialRegistry, bound to a specific deployed contract.
func NewCredentialRegistryCaller(address common.Address, caller bind.ContractCaller) (*CredentialRegistryCaller, error) {
	contract, err := bindCredentialRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CredentialRegistryCaller{contract: contract}, nil
}

// NewCredentialRegistryTransactor creates a new write-only instance of CredentialRegistry, bound to a specific deployed contract.
func NewCredentialRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*CredentialRegistryTransactor, error) {
	contract, err := bindCredentialRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CredentialRegistryTransactor{contract: contract}, nil
}

// NewCredentialRegistryFilterer creates a new log filterer instance of CredentialRegistry, bound to a specific deployed contract.
func NewCredentialRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*CredentialRegistryFilterer, error) {
	contract, err := bindCredentialRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CredentialRegistryFilterer{contract: contract}, nil
}

// bindCredentialRegistry binds a generic wrapper to an already deployed contract.
func bindCredentialRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CredentialRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CredentialRegistry *CredentialRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CredentialRegistry.Contract.CredentialRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CredentialRegistry *CredentialRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.CredentialRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CredentialRegistry *CredentialRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.CredentialRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CredentialRegistry *CredentialRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CredentialRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CredentialRegistry *CredentialRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CredentialRegistry *CredentialRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CredentialRegistry *CredentialRegistryCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CredentialRegistry *CredentialRegistrySession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CredentialRegistry.Contract.DEFAULTADMINROLE(&_CredentialRegistry.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CredentialRegistry *CredentialRegistryCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CredentialRegistry.Contract.DEFAULTADMINROLE(&_CredentialRegistry.CallOpts)
}

// ISSUERROLE is a free data retrieval call binding the contract method 0x82aefa24.
//
// Solidity: function ISSUER_ROLE() view returns(bytes32)
func (_CredentialRegistry *CredentialRegistryCaller) ISSUERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "ISSUER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ISSUERROLE is a free data retrieval call binding the contract method 0x82aefa24.
//
// Solidity: function ISSUER_ROLE() view returns(bytes32)
func (_CredentialRegistry *CredentialRegistrySession) ISSUERROLE() ([32]byte, error) {
	return _CredentialRegistry.Contract.ISSUERROLE(&_CredentialRegistry.CallOpts)
}

// ISSUERROLE is a free data retrieval call binding the contract method 0x82aefa24.
//
// Solidity: function ISSUER_ROLE() view returns(bytes32)
func (_CredentialRegistry *CredentialRegistryCallerSession) ISSUERROLE() ([32]byte, error) {
	return _CredentialRegistry.Contract.ISSUERROLE(&_CredentialRegistry.CallOpts)
}

// Credentials is a free data retrieval call binding the contract method 0xf078e5db.
//
// Solidity: function credentials(bytes32 , address ) view returns(address issuer, address subject, uint256 validFrom, uint256 validTo, bool status)
func (_CredentialRegistry *CredentialRegistryCaller) Credentials(opts *bind.CallOpts, arg0 [32]byte, arg1 common.Address) (struct {
	Issuer    common.Address
	Subject   common.Address
	ValidFrom *big.Int
	ValidTo   *big.Int
	Status    bool
}, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "credentials", arg0, arg1)

	outstruct := new(struct {
		Issuer    common.Address
		Subject   common.Address
		ValidFrom *big.Int
		ValidTo   *big.Int
		Status    bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Issuer = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Subject = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.ValidFrom = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.ValidTo = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// Credentials is a free data retrieval call binding the contract method 0xf078e5db.
//
// Solidity: function credentials(bytes32 , address ) view returns(address issuer, address subject, uint256 validFrom, uint256 validTo, bool status)
func (_CredentialRegistry *CredentialRegistrySession) Credentials(arg0 [32]byte, arg1 common.Address) (struct {
	Issuer    common.Address
	Subject   common.Address
	ValidFrom *big.Int
	ValidTo   *big.Int
	Status    bool
}, error) {
	return _CredentialRegistry.Contract.Credentials(&_CredentialRegistry.CallOpts, arg0, arg1)
}

// Credentials is a free data retrieval call binding the contract method 0xf078e5db.
//
// Solidity: function credentials(bytes32 , address ) view returns(address issuer, address subject, uint256 validFrom, uint256 validTo, bool status)
func (_CredentialRegistry *CredentialRegistryCallerSession) Credentials(arg0 [32]byte, arg1 common.Address) (struct {
	Issuer    common.Address
	Subject   common.Address
	ValidFrom *big.Int
	ValidTo   *big.Int
	Status    bool
}, error) {
	return _CredentialRegistry.Contract.Credentials(&_CredentialRegistry.CallOpts, arg0, arg1)
}

// Exist is a free data retrieval call binding the contract method 0x957839d9.
//
// Solidity: function exist(bytes32 _credentialHash, address issuer) view returns(bool exist)
func (_CredentialRegistry *CredentialRegistryCaller) Exist(opts *bind.CallOpts, _credentialHash [32]byte, issuer common.Address) (bool, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "exist", _credentialHash, issuer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exist is a free data retrieval call binding the contract method 0x957839d9.
//
// Solidity: function exist(bytes32 _credentialHash, address issuer) view returns(bool exist)
func (_CredentialRegistry *CredentialRegistrySession) Exist(_credentialHash [32]byte, issuer common.Address) (bool, error) {
	return _CredentialRegistry.Contract.Exist(&_CredentialRegistry.CallOpts, _credentialHash, issuer)
}

// Exist is a free data retrieval call binding the contract method 0x957839d9.
//
// Solidity: function exist(bytes32 _credentialHash, address issuer) view returns(bool exist)
func (_CredentialRegistry *CredentialRegistryCallerSession) Exist(_credentialHash [32]byte, issuer common.Address) (bool, error) {
	return _CredentialRegistry.Contract.Exist(&_CredentialRegistry.CallOpts, _credentialHash, issuer)
}

// GetIssuer is a free data retrieval call binding the contract method 0x9052944e.
//
// Solidity: function getIssuer(bytes32 digest, uint8 v, bytes32 r, bytes32 s) pure returns(address issuer)
func (_CredentialRegistry *CredentialRegistryCaller) GetIssuer(opts *bind.CallOpts, digest [32]byte, v uint8, r [32]byte, s [32]byte) (common.Address, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "getIssuer", digest, v, r, s)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetIssuer is a free data retrieval call binding the contract method 0x9052944e.
//
// Solidity: function getIssuer(bytes32 digest, uint8 v, bytes32 r, bytes32 s) pure returns(address issuer)
func (_CredentialRegistry *CredentialRegistrySession) GetIssuer(digest [32]byte, v uint8, r [32]byte, s [32]byte) (common.Address, error) {
	return _CredentialRegistry.Contract.GetIssuer(&_CredentialRegistry.CallOpts, digest, v, r, s)
}

// GetIssuer is a free data retrieval call binding the contract method 0x9052944e.
//
// Solidity: function getIssuer(bytes32 digest, uint8 v, bytes32 r, bytes32 s) pure returns(address issuer)
func (_CredentialRegistry *CredentialRegistryCallerSession) GetIssuer(digest [32]byte, v uint8, r [32]byte, s [32]byte) (common.Address, error) {
	return _CredentialRegistry.Contract.GetIssuer(&_CredentialRegistry.CallOpts, digest, v, r, s)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CredentialRegistry *CredentialRegistryCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CredentialRegistry *CredentialRegistrySession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CredentialRegistry.Contract.GetRoleAdmin(&_CredentialRegistry.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CredentialRegistry *CredentialRegistryCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CredentialRegistry.Contract.GetRoleAdmin(&_CredentialRegistry.CallOpts, role)
}

// GetSigners is a free data retrieval call binding the contract method 0x06b15df4.
//
// Solidity: function getSigners(bytes32 _credentialHash, address _issuer) view returns(uint8 signers)
func (_CredentialRegistry *CredentialRegistryCaller) GetSigners(opts *bind.CallOpts, _credentialHash [32]byte, _issuer common.Address) (uint8, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "getSigners", _credentialHash, _issuer)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetSigners is a free data retrieval call binding the contract method 0x06b15df4.
//
// Solidity: function getSigners(bytes32 _credentialHash, address _issuer) view returns(uint8 signers)
func (_CredentialRegistry *CredentialRegistrySession) GetSigners(_credentialHash [32]byte, _issuer common.Address) (uint8, error) {
	return _CredentialRegistry.Contract.GetSigners(&_CredentialRegistry.CallOpts, _credentialHash, _issuer)
}

// GetSigners is a free data retrieval call binding the contract method 0x06b15df4.
//
// Solidity: function getSigners(bytes32 _credentialHash, address _issuer) view returns(uint8 signers)
func (_CredentialRegistry *CredentialRegistryCallerSession) GetSigners(_credentialHash [32]byte, _issuer common.Address) (uint8, error) {
	return _CredentialRegistry.Contract.GetSigners(&_CredentialRegistry.CallOpts, _credentialHash, _issuer)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CredentialRegistry *CredentialRegistryCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CredentialRegistry *CredentialRegistrySession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CredentialRegistry.Contract.HasRole(&_CredentialRegistry.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CredentialRegistry *CredentialRegistryCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CredentialRegistry.Contract.HasRole(&_CredentialRegistry.CallOpts, role, account)
}

// IsSigner is a free data retrieval call binding the contract method 0x701ee463.
//
// Solidity: function isSigner(bytes32 _credentialHash, address _issuer, bytes _signature) view returns(bool)
func (_CredentialRegistry *CredentialRegistryCaller) IsSigner(opts *bind.CallOpts, _credentialHash [32]byte, _issuer common.Address, _signature []byte) (bool, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "isSigner", _credentialHash, _issuer, _signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSigner is a free data retrieval call binding the contract method 0x701ee463.
//
// Solidity: function isSigner(bytes32 _credentialHash, address _issuer, bytes _signature) view returns(bool)
func (_CredentialRegistry *CredentialRegistrySession) IsSigner(_credentialHash [32]byte, _issuer common.Address, _signature []byte) (bool, error) {
	return _CredentialRegistry.Contract.IsSigner(&_CredentialRegistry.CallOpts, _credentialHash, _issuer, _signature)
}

// IsSigner is a free data retrieval call binding the contract method 0x701ee463.
//
// Solidity: function isSigner(bytes32 _credentialHash, address _issuer, bytes _signature) view returns(bool)
func (_CredentialRegistry *CredentialRegistryCallerSession) IsSigner(_credentialHash [32]byte, _issuer common.Address, _signature []byte) (bool, error) {
	return _CredentialRegistry.Contract.IsSigner(&_CredentialRegistry.CallOpts, _credentialHash, _issuer, _signature)
}

// Status is a free data retrieval call binding the contract method 0xd6d76ed5.
//
// Solidity: function status(address issuer, bytes32 _credentialHash) view returns(bool)
func (_CredentialRegistry *CredentialRegistryCaller) Status(opts *bind.CallOpts, issuer common.Address, _credentialHash [32]byte) (bool, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "status", issuer, _credentialHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Status is a free data retrieval call binding the contract method 0xd6d76ed5.
//
// Solidity: function status(address issuer, bytes32 _credentialHash) view returns(bool)
func (_CredentialRegistry *CredentialRegistrySession) Status(issuer common.Address, _credentialHash [32]byte) (bool, error) {
	return _CredentialRegistry.Contract.Status(&_CredentialRegistry.CallOpts, issuer, _credentialHash)
}

// Status is a free data retrieval call binding the contract method 0xd6d76ed5.
//
// Solidity: function status(address issuer, bytes32 _credentialHash) view returns(bool)
func (_CredentialRegistry *CredentialRegistryCallerSession) Status(issuer common.Address, _credentialHash [32]byte) (bool, error) {
	return _CredentialRegistry.Contract.Status(&_CredentialRegistry.CallOpts, issuer, _credentialHash)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CredentialRegistry *CredentialRegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CredentialRegistry *CredentialRegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CredentialRegistry.Contract.SupportsInterface(&_CredentialRegistry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CredentialRegistry *CredentialRegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CredentialRegistry.Contract.SupportsInterface(&_CredentialRegistry.CallOpts, interfaceId)
}

// VerifyIssuer is a free data retrieval call binding the contract method 0x87cf356e.
//
// Solidity: function verifyIssuer(address issuer, address signer) pure returns(bool isValid)
func (_CredentialRegistry *CredentialRegistryCaller) VerifyIssuer(opts *bind.CallOpts, issuer common.Address, signer common.Address) (bool, error) {
	var out []interface{}
	err := _CredentialRegistry.contract.Call(opts, &out, "verifyIssuer", issuer, signer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyIssuer is a free data retrieval call binding the contract method 0x87cf356e.
//
// Solidity: function verifyIssuer(address issuer, address signer) pure returns(bool isValid)
func (_CredentialRegistry *CredentialRegistrySession) VerifyIssuer(issuer common.Address, signer common.Address) (bool, error) {
	return _CredentialRegistry.Contract.VerifyIssuer(&_CredentialRegistry.CallOpts, issuer, signer)
}

// VerifyIssuer is a free data retrieval call binding the contract method 0x87cf356e.
//
// Solidity: function verifyIssuer(address issuer, address signer) pure returns(bool isValid)
func (_CredentialRegistry *CredentialRegistryCallerSession) VerifyIssuer(issuer common.Address, signer common.Address) (bool, error) {
	return _CredentialRegistry.Contract.VerifyIssuer(&_CredentialRegistry.CallOpts, issuer, signer)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CredentialRegistry *CredentialRegistryTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CredentialRegistry.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CredentialRegistry *CredentialRegistrySession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.GrantRole(&_CredentialRegistry.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CredentialRegistry *CredentialRegistryTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.GrantRole(&_CredentialRegistry.TransactOpts, role, account)
}

// RegisterCredential is a paid mutator transaction binding the contract method 0x75130747.
//
// Solidity: function registerCredential(address issuer, address _subject, bytes32 _credentialHash, uint256 _from, uint256 _exp, bytes signature) returns(bool)
func (_CredentialRegistry *CredentialRegistryTransactor) RegisterCredential(opts *bind.TransactOpts, issuer common.Address, _subject common.Address, _credentialHash [32]byte, _from *big.Int, _exp *big.Int, signature []byte) (*types.Transaction, error) {
	return _CredentialRegistry.contract.Transact(opts, "registerCredential", issuer, _subject, _credentialHash, _from, _exp, signature)
}

// RegisterCredential is a paid mutator transaction binding the contract method 0x75130747.
//
// Solidity: function registerCredential(address issuer, address _subject, bytes32 _credentialHash, uint256 _from, uint256 _exp, bytes signature) returns(bool)
func (_CredentialRegistry *CredentialRegistrySession) RegisterCredential(issuer common.Address, _subject common.Address, _credentialHash [32]byte, _from *big.Int, _exp *big.Int, signature []byte) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.RegisterCredential(&_CredentialRegistry.TransactOpts, issuer, _subject, _credentialHash, _from, _exp, signature)
}

// RegisterCredential is a paid mutator transaction binding the contract method 0x75130747.
//
// Solidity: function registerCredential(address issuer, address _subject, bytes32 _credentialHash, uint256 _from, uint256 _exp, bytes signature) returns(bool)
func (_CredentialRegistry *CredentialRegistryTransactorSession) RegisterCredential(issuer common.Address, _subject common.Address, _credentialHash [32]byte, _from *big.Int, _exp *big.Int, signature []byte) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.RegisterCredential(&_CredentialRegistry.TransactOpts, issuer, _subject, _credentialHash, _from, _exp, signature)
}

// RegisterSignature is a paid mutator transaction binding the contract method 0x448684ac.
//
// Solidity: function registerSignature(bytes32 _credentialHash, address issuer, bytes signature) returns(bool)
func (_CredentialRegistry *CredentialRegistryTransactor) RegisterSignature(opts *bind.TransactOpts, _credentialHash [32]byte, issuer common.Address, signature []byte) (*types.Transaction, error) {
	return _CredentialRegistry.contract.Transact(opts, "registerSignature", _credentialHash, issuer, signature)
}

// RegisterSignature is a paid mutator transaction binding the contract method 0x448684ac.
//
// Solidity: function registerSignature(bytes32 _credentialHash, address issuer, bytes signature) returns(bool)
func (_CredentialRegistry *CredentialRegistrySession) RegisterSignature(_credentialHash [32]byte, issuer common.Address, signature []byte) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.RegisterSignature(&_CredentialRegistry.TransactOpts, _credentialHash, issuer, signature)
}

// RegisterSignature is a paid mutator transaction binding the contract method 0x448684ac.
//
// Solidity: function registerSignature(bytes32 _credentialHash, address issuer, bytes signature) returns(bool)
func (_CredentialRegistry *CredentialRegistryTransactorSession) RegisterSignature(_credentialHash [32]byte, issuer common.Address, signature []byte) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.RegisterSignature(&_CredentialRegistry.TransactOpts, _credentialHash, issuer, signature)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CredentialRegistry *CredentialRegistryTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CredentialRegistry.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CredentialRegistry *CredentialRegistrySession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.RenounceRole(&_CredentialRegistry.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CredentialRegistry *CredentialRegistryTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.RenounceRole(&_CredentialRegistry.TransactOpts, role, account)
}

// RevokeCredential is a paid mutator transaction binding the contract method 0xca6eec78.
//
// Solidity: function revokeCredential(bytes32 _credentialHash) returns(bool)
func (_CredentialRegistry *CredentialRegistryTransactor) RevokeCredential(opts *bind.TransactOpts, _credentialHash [32]byte) (*types.Transaction, error) {
	return _CredentialRegistry.contract.Transact(opts, "revokeCredential", _credentialHash)
}

// RevokeCredential is a paid mutator transaction binding the contract method 0xca6eec78.
//
// Solidity: function revokeCredential(bytes32 _credentialHash) returns(bool)
func (_CredentialRegistry *CredentialRegistrySession) RevokeCredential(_credentialHash [32]byte) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.RevokeCredential(&_CredentialRegistry.TransactOpts, _credentialHash)
}

// RevokeCredential is a paid mutator transaction binding the contract method 0xca6eec78.
//
// Solidity: function revokeCredential(bytes32 _credentialHash) returns(bool)
func (_CredentialRegistry *CredentialRegistryTransactorSession) RevokeCredential(_credentialHash [32]byte) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.RevokeCredential(&_CredentialRegistry.TransactOpts, _credentialHash)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CredentialRegistry *CredentialRegistryTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CredentialRegistry.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CredentialRegistry *CredentialRegistrySession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.RevokeRole(&_CredentialRegistry.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CredentialRegistry *CredentialRegistryTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CredentialRegistry.Contract.RevokeRole(&_CredentialRegistry.TransactOpts, role, account)
}

// CredentialRegistryCredentialRegisteredIterator is returned from FilterCredentialRegistered and is used to iterate over the raw logs and unpacked data for CredentialRegistered events raised by the CredentialRegistry contract.
type CredentialRegistryCredentialRegisteredIterator struct {
	Event *CredentialRegistryCredentialRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CredentialRegistryCredentialRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CredentialRegistryCredentialRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CredentialRegistryCredentialRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CredentialRegistryCredentialRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CredentialRegistryCredentialRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CredentialRegistryCredentialRegistered represents a CredentialRegistered event raised by the CredentialRegistry contract.
type CredentialRegistryCredentialRegistered struct {
	CredentialHash [32]byte
	By             common.Address
	Id             common.Address
	Iat            *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCredentialRegistered is a free log retrieval operation binding the contract event 0x889569e4303664728fba29a472b24d3032707e6ebbee9a46e070c5c8f2ae4c25.
//
// Solidity: event CredentialRegistered(bytes32 indexed credentialHash, address by, address id, uint256 iat)
func (_CredentialRegistry *CredentialRegistryFilterer) FilterCredentialRegistered(opts *bind.FilterOpts, credentialHash [][32]byte) (*CredentialRegistryCredentialRegisteredIterator, error) {

	var credentialHashRule []interface{}
	for _, credentialHashItem := range credentialHash {
		credentialHashRule = append(credentialHashRule, credentialHashItem)
	}

	logs, sub, err := _CredentialRegistry.contract.FilterLogs(opts, "CredentialRegistered", credentialHashRule)
	if err != nil {
		return nil, err
	}
	return &CredentialRegistryCredentialRegisteredIterator{contract: _CredentialRegistry.contract, event: "CredentialRegistered", logs: logs, sub: sub}, nil
}


// WatchCredentialRegistered is a free log subscription operation binding the contract event 0x889569e4303664728fba29a472b24d3032707e6ebbee9a46e070c5c8f2ae4c25.
//
// Solidity: event CredentialRegistered(bytes32 indexed credentialHash, address by, address id, uint256 iat)
func (_CredentialRegistry *CredentialRegistryFilterer) WatchCredentialRegistered(opts *bind.WatchOpts, sink chan<- *CredentialRegistryCredentialRegistered, credentialHash [][32]byte) (event.Subscription, error) {

	var credentialHashRule []interface{}
	for _, credentialHashItem := range credentialHash {
		credentialHashRule = append(credentialHashRule, credentialHashItem)
	}

	logs, sub, err := _CredentialRegistry.contract.WatchLogs(opts, "CredentialRegistered", credentialHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CredentialRegistryCredentialRegistered)
				if err := _CredentialRegistry.contract.UnpackLog(event, "CredentialRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCredentialRegistered is a log parse operation binding the contract event 0x889569e4303664728fba29a472b24d3032707e6ebbee9a46e070c5c8f2ae4c25.
//
// Solidity: event CredentialRegistered(bytes32 indexed credentialHash, address by, address id, uint256 iat)
func (_CredentialRegistry *CredentialRegistryFilterer) ParseCredentialRegistered(log types.Log) (*CredentialRegistryCredentialRegistered, error) {
	event := new(CredentialRegistryCredentialRegistered)
	if err := _CredentialRegistry.contract.UnpackLog(event, "CredentialRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CredentialRegistryCredentialRevokedIterator is returned from FilterCredentialRevoked and is used to iterate over the raw logs and unpacked data for CredentialRevoked events raised by the CredentialRegistry contract.
type CredentialRegistryCredentialRevokedIterator struct {
	Event *CredentialRegistryCredentialRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CredentialRegistryCredentialRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CredentialRegistryCredentialRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CredentialRegistryCredentialRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CredentialRegistryCredentialRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CredentialRegistryCredentialRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CredentialRegistryCredentialRevoked represents a CredentialRevoked event raised by the CredentialRegistry contract.
type CredentialRegistryCredentialRevoked struct {
	CredentialHash [32]byte
	By             common.Address
	Date           *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCredentialRevoked is a free log retrieval operation binding the contract event 0x80d4746828447d65eceb938c7f9d85fbeb232fe7819d5209ed452b3940f8904b.
//
// Solidity: event CredentialRevoked(bytes32 indexed credentialHash, address by, uint256 date)
func (_CredentialRegistry *CredentialRegistryFilterer) FilterCredentialRevoked(opts *bind.FilterOpts, credentialHash [][32]byte) (*CredentialRegistryCredentialRevokedIterator, error) {

	var credentialHashRule []interface{}
	for _, credentialHashItem := range credentialHash {
		credentialHashRule = append(credentialHashRule, credentialHashItem)
	}

	logs, sub, err := _CredentialRegistry.contract.FilterLogs(opts, "CredentialRevoked", credentialHashRule)
	if err != nil {
		return nil, err
	}
	return &CredentialRegistryCredentialRevokedIterator{contract: _CredentialRegistry.contract, event: "CredentialRevoked", logs: logs, sub: sub}, nil
}

// WatchCredentialRevoked is a free log subscription operation binding the contract event 0x80d4746828447d65eceb938c7f9d85fbeb232fe7819d5209ed452b3940f8904b.
//
// Solidity: event CredentialRevoked(bytes32 indexed credentialHash, address by, uint256 date)
func (_CredentialRegistry *CredentialRegistryFilterer) WatchCredentialRevoked(opts *bind.WatchOpts, sink chan<- *CredentialRegistryCredentialRevoked, credentialHash [][32]byte) (event.Subscription, error) {

	var credentialHashRule []interface{}
	for _, credentialHashItem := range credentialHash {
		credentialHashRule = append(credentialHashRule, credentialHashItem)
	}

	logs, sub, err := _CredentialRegistry.contract.WatchLogs(opts, "CredentialRevoked", credentialHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CredentialRegistryCredentialRevoked)
				if err := _CredentialRegistry.contract.UnpackLog(event, "CredentialRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCredentialRevoked is a log parse operation binding the contract event 0x80d4746828447d65eceb938c7f9d85fbeb232fe7819d5209ed452b3940f8904b.
//
// Solidity: event CredentialRevoked(bytes32 indexed credentialHash, address by, uint256 date)
func (_CredentialRegistry *CredentialRegistryFilterer) ParseCredentialRevoked(log types.Log) (*CredentialRegistryCredentialRevoked, error) {
	event := new(CredentialRegistryCredentialRevoked)
	if err := _CredentialRegistry.contract.UnpackLog(event, "CredentialRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CredentialRegistryRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the CredentialRegistry contract.
type CredentialRegistryRoleAdminChangedIterator struct {
	Event *CredentialRegistryRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CredentialRegistryRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CredentialRegistryRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CredentialRegistryRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CredentialRegistryRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CredentialRegistryRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CredentialRegistryRoleAdminChanged represents a RoleAdminChanged event raised by the CredentialRegistry contract.
type CredentialRegistryRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CredentialRegistry *CredentialRegistryFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CredentialRegistryRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CredentialRegistry.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &CredentialRegistryRoleAdminChangedIterator{contract: _CredentialRegistry.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}


// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CredentialRegistry *CredentialRegistryFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CredentialRegistryRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CredentialRegistry.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CredentialRegistryRoleAdminChanged)
				if err := _CredentialRegistry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CredentialRegistry *CredentialRegistryFilterer) ParseRoleAdminChanged(log types.Log) (*CredentialRegistryRoleAdminChanged, error) {
	event := new(CredentialRegistryRoleAdminChanged)
	if err := _CredentialRegistry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CredentialRegistryRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the CredentialRegistry contract.
type CredentialRegistryRoleGrantedIterator struct {
	Event *CredentialRegistryRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CredentialRegistryRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CredentialRegistryRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CredentialRegistryRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CredentialRegistryRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CredentialRegistryRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CredentialRegistryRoleGranted represents a RoleGranted event raised by the CredentialRegistry contract.
type CredentialRegistryRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CredentialRegistry *CredentialRegistryFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CredentialRegistryRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CredentialRegistry.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CredentialRegistryRoleGrantedIterator{contract: _CredentialRegistry.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}


// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CredentialRegistry *CredentialRegistryFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CredentialRegistryRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CredentialRegistry.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CredentialRegistryRoleGranted)
				if err := _CredentialRegistry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CredentialRegistry *CredentialRegistryFilterer) ParseRoleGranted(log types.Log) (*CredentialRegistryRoleGranted, error) {
	event := new(CredentialRegistryRoleGranted)
	if err := _CredentialRegistry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CredentialRegistryRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the CredentialRegistry contract.
type CredentialRegistryRoleRevokedIterator struct {
	Event *CredentialRegistryRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CredentialRegistryRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CredentialRegistryRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CredentialRegistryRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CredentialRegistryRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CredentialRegistryRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CredentialRegistryRoleRevoked represents a RoleRevoked event raised by the CredentialRegistry contract.
type CredentialRegistryRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CredentialRegistry *CredentialRegistryFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CredentialRegistryRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CredentialRegistry.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CredentialRegistryRoleRevokedIterator{contract: _CredentialRegistry.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}


// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CredentialRegistry *CredentialRegistryFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CredentialRegistryRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CredentialRegistry.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CredentialRegistryRoleRevoked)
				if err := _CredentialRegistry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CredentialRegistry *CredentialRegistryFilterer) ParseRoleRevoked(log types.Log) (*CredentialRegistryRoleRevoked, error) {
	event := new(CredentialRegistryRoleRevoked)
	if err := _CredentialRegistry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CredentialRegistrySignatureRegisteredIterator is returned from FilterSignatureRegistered and is used to iterate over the raw logs and unpacked data for SignatureRegistered events raised by the CredentialRegistry contract.
type CredentialRegistrySignatureRegisteredIterator struct {
	Event *CredentialRegistrySignatureRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CredentialRegistrySignatureRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CredentialRegistrySignatureRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CredentialRegistrySignatureRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CredentialRegistrySignatureRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CredentialRegistrySignatureRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CredentialRegistrySignatureRegistered represents a SignatureRegistered event raised by the CredentialRegistry contract.
type CredentialRegistrySignatureRegistered struct {
	Issuer    common.Address
	Exits     bool
	Signature ICredentialRegistrySignature
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSignatureRegistered is a free log retrieval operation binding the contract event 0x0ffaced37e4d6f4a46de47c31d21fccaad48817a7da7f346154835a547780ecd.
//
// Solidity: event SignatureRegistered(address issuer, bool exits, (bytes32,bytes32,uint8) signature)
func (_CredentialRegistry *CredentialRegistryFilterer) FilterSignatureRegistered(opts *bind.FilterOpts) (*CredentialRegistrySignatureRegisteredIterator, error) {

	logs, sub, err := _CredentialRegistry.contract.FilterLogs(opts, "SignatureRegistered")
	if err != nil {
		return nil, err
	}
	return &CredentialRegistrySignatureRegisteredIterator{contract: _CredentialRegistry.contract, event: "SignatureRegistered", logs: logs, sub: sub}, nil
}

var SignatureRegisteredTopicHash = "0x0ffaced37e4d6f4a46de47c31d21fccaad48817a7da7f346154835a547780ecd"

// WatchSignatureRegistered is a free log subscription operation binding the contract event 0x0ffaced37e4d6f4a46de47c31d21fccaad48817a7da7f346154835a547780ecd.
//
// Solidity: event SignatureRegistered(address issuer, bool exits, (bytes32,bytes32,uint8) signature)
func (_CredentialRegistry *CredentialRegistryFilterer) WatchSignatureRegistered(opts *bind.WatchOpts, sink chan<- *CredentialRegistrySignatureRegistered) (event.Subscription, error) {

	logs, sub, err := _CredentialRegistry.contract.WatchLogs(opts, "SignatureRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CredentialRegistrySignatureRegistered)
				if err := _CredentialRegistry.contract.UnpackLog(event, "SignatureRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignatureRegistered is a log parse operation binding the contract event 0x0ffaced37e4d6f4a46de47c31d21fccaad48817a7da7f346154835a547780ecd.
//
// Solidity: event SignatureRegistered(address issuer, bool exits, (bytes32,bytes32,uint8) signature)
func (_CredentialRegistry *CredentialRegistryFilterer) ParseSignatureRegistered(log types.Log) (*CredentialRegistrySignatureRegistered, error) {
	event := new(CredentialRegistrySignatureRegistered)
	if err := _CredentialRegistry.contract.UnpackLog(event, "SignatureRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
