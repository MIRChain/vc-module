// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bind

import (
	"math/big"
	"strings"

	ethereum "github.com/MIRChain/MIR"
	"github.com/MIRChain/MIR/accounts/abi"
	"github.com/MIRChain/MIR/accounts/abi/bind"
	"github.com/MIRChain/MIR/common"
	"github.com/MIRChain/MIR/core/types"
	"github.com/MIRChain/MIR/crypto"
	"github.com/MIRChain/MIR/crypto/gost3410"
	"github.com/MIRChain/MIR/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = common.Big1
	_ = event.NewSubscription
)

// ClaimTypesVerifiableCredential is an auto generated low-level Go binding around an user-defined struct.
type ClaimTypesVerifiableCredential[P crypto.PublicKey] struct {
	Issuer    common.Address
	Subject   common.Address
	Data      [32]byte
	ValidFrom *big.Int
	ValidTo   *big.Int
}

// ClaimsVerifierABI is the input ABI used to generate the binding from.
const ClaimsVerifierABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISSUER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"}],\"internalType\":\"structClaimTypes.VerifiableCredential\",\"name\":\"vc\",\"type\":\"tuple\"}],\"name\":\"credentialHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subject\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_credentialHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"registerCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_credentialHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"registerSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"}],\"internalType\":\"structClaimTypes.VerifiableCredential\",\"name\":\"vc\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"verifyCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"}],\"internalType\":\"structClaimTypes.VerifiableCredential\",\"name\":\"vc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifySigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

var ClaimsVerifierParsedABI, _ = abi.JSON[gost3410.PublicKey](strings.NewReader(ClaimsVerifierABI))

// ClaimsVerifierBin is the compiled bytecode used for deploying new contracts.
var ClaimsVerifierBin = "0x60806040523480156200001157600080fd5b506040516200390a3803806200390a8339818101604052810190620000379190620004d1565b6040518060400160405280600c81526020017f454950373132446f6d61696e00000000000000000000000000000000000000008152506040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506209e5513084620000f060405180608001604052808781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff168152506200015760201b60201c565b600181905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050620001506000801b33620001cf60201b60201c565b50620005a7565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82600001518051906020012083602001518051906020012084604001518560600151604051602001620001b29594939291906200054a565b604051602081830303815290604052805190602001209050919050565b620001e682826200021760201b62000ae51760201c565b6200021281600360008581526020019081526020016000206200022d60201b62000af31790919060201c565b505050565b6200022982826200026560201b60201c565b5050565b60006200025d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200035760201b60201c565b905092915050565b620002778282620003d160201b60201c565b620003535760016002600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002f86200043c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006200036b83836200044460201b60201c565b620003c6578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620003cb565b600090505b92915050565b60006002600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080836001016000848152602001908152602001600020541415905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000499826200046c565b9050919050565b620004ab816200048c565b8114620004b757600080fd5b50565b600081519050620004cb81620004a0565b92915050565b600060208284031215620004ea57620004e962000467565b5b6000620004fa84828501620004ba565b91505092915050565b6000819050919050565b620005188162000503565b82525050565b6000819050919050565b62000533816200051e565b82525050565b62000544816200048c565b82525050565b600060a0820190506200056160008301886200050d565b6200057060208301876200050d565b6200057f60408301866200050d565b6200058e606083018562000528565b6200059d608083018462000539565b9695505050505050565b61335380620005b76000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80634160483911610097578063b057d63b11610066578063b057d63b146102e9578063c2b5454d14610319578063ceade62c14610337578063f47a17261461036757610100565b8063416048391461023b5780636285c82e1461026b57806380e9d11a1461029b578063aa6aa773146102b957610100565b80631b902b21116100d35780631b902b21146101775780632663b6bb146101a7578063366f8b95146101d7578063388665a41461020757610100565b8063021a3b3d1461010557806302c1b9bd146101215780630d2bdc941461013f57806318d785561461015b575b600080fd5b61011f600480360381019061011a919061213a565b610397565b005b6101296103cb565b6040516101369190612189565b60405180910390f35b6101596004803603810190610154919061213a565b6103d2565b005b6101756004803603810190610170919061213a565b610406565b005b610191600480360381019061018c9190612209565b61043a565b60405161019e9190612298565b60405180910390f35b6101c160048036038101906101bc919061213a565b610585565b6040516101ce9190612298565b60405180910390f35b6101f160048036038101906101ec91906122e9565b6105f0565b6040516101fe9190612338565b60405180910390f35b610221600480360381019061021c91906124a9565b61061f565b604051610232959493929190612511565b60405180910390f35b61025560048036038101906102509190612564565b6106ed565b6040516102629190612298565b60405180910390f35b61028560048036038101906102809190612656565b61087b565b6040516102929190612298565b60405180910390f35b6102a36108f5565b6040516102b09190612189565b60405180910390f35b6102d360048036038101906102ce9190612683565b610919565b6040516102e091906126bf565b60405180910390f35b61030360048036038101906102fe9190612683565b61093d565b6040516103109190612189565b60405180910390f35b61032161095d565b60405161032e9190612189565b60405180910390f35b610351600480360381019061034c91906126da565b610981565b60405161035e9190612189565b60405180910390f35b610381600480360381019061037c9190612707565b6109c2565b60405161038e9190612298565b60405180910390f35b6103a18282610b23565b6103c68160036000858152602001908152602001600020610b4c90919063ffffffff16565b505050565b6000801b81565b6103dc8282610b7c565b6104018160036000858152602001908152602001600020610b4c90919063ffffffff16565b505050565b6104108282610bff565b6104358160036000858152602001908152602001600020610af390919063ffffffff16565b505050565b60006104667fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f7033610585565b6104a5576040517feacf199d00000000000000000000000000000000000000000000000000000000815260040161049c906127c4565b60405180910390fd5b60006104fe84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505087610c2890919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461056e576040517feacf199d00000000000000000000000000000000000000000000000000000000815260040161056590612856565b60405180910390fd5b61057a86868686610db2565b915050949350505050565b60006002600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006106178260036000868152602001908152602001600020610e6190919063ffffffff16565b905092915050565b6000806000806000806001546106348b610e7b565b6040516020016106459291906128ee565b60405160208183030381529060405280519060200120905061066b818b60000151610ee9565b610679828c60000151610f90565b61068a838d600001518d8d8d611037565b6106b37fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70610919565b6106c1858f6000015161112f565b60ff16146106d78e606001518f608001516111d6565b9550955095509550955050945094509450945094565b6000806106fc3360601b6111ef565b905060006107297f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa1226114d7565b90506107557f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12233610585565b610794576040517feacf199d00000000000000000000000000000000000000000000000000000000815260040161078b90612971565b60405180910390fd5b60006107ed86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508a610c2890919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461085d576040517feacf199d00000000000000000000000000000000000000000000000000000000815260040161085490612856565b60405180910390fd5b61086c338b8b8b8b8b8b6117b0565b93505050509695505050505050565b60007f9c052ce6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108ee57506108ed82611868565b5b9050919050565b7fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f7081565b6000610936600360008481526020019081526020016000206118e2565b9050919050565b600060026000838152602001908152602001600020600101549050919050565b7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12281565b60008060015461099084610e7b565b6040516020016109a19291906128ee565b60405160208183030381529060405280519060200120905080915050919050565b6000806001546109d186610e7b565b6040516020016109e29291906128ee565b6040516020818303038152906040528051906020012090506000610a5385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505083610c2890919063ffffffff16565b9050610a7f7fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f7082610585565b8015610ada5750610ad982876000015187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506118f7565b5b925050509392505050565b610aef82826119a1565b5050565b6000610b1b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611a82565b905092915050565b610b2c8261093d565b610b3d81610b38611af2565b611afa565b610b478383611b97565b505050565b6000610b74836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611c79565b905092915050565b610b84611af2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bf1576040517feacf199d000000000000000000000000000000000000000000000000000000008152600401610be890612a03565b60405180910390fd5b610bfb8282611b97565b5050565b610c088261093d565b610c1981610c14611af2565b611afa565b610c2383836119a1565b505050565b60006041825114610c6e576040517feacf199d000000000000000000000000000000000000000000000000000000008152600401610c6590612a6f565b60405180910390fd5b60008060006020850151925060408501519150606085015160001a9050601b8160ff1614158015610ca35750601c8160ff1614155b15610ce3576040517feacf199d000000000000000000000000000000000000000000000000000000008152600401610cda90612b01565b60405180910390fd5b600060018783868660405160008152602001604052604051610d089493929190612b30565b6020604051602081039080840390855afa158015610d2a573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610da5576040517feacf199d000000000000000000000000000000000000000000000000000000008152600401610d9c90612bc1565b60405180910390fd5b8094505050505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b902b21868686866040518563ffffffff1660e01b8152600401610e149493929190612c2e565b6020604051808303816000875af1158015610e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e579190612c9a565b9050949350505050565b6000610e708360000183611d8d565b60001c905092915050565b60007f057aaf322c79d4b390549d58e7c9e54049c8146bdb31538929442a557873670282600001518360200151846040015185606001518660800151604051602001610ecc96959493929190612cc7565b604051602081830303815290604052805190602001209050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aca9bc7d84846040518363ffffffff1660e01b8152600401610f47929190612d28565b602060405180830381865afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f889190612c9a565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b65da04283856040518363ffffffff1660e01b8152600401610fee929190612d51565b602060405180830381865afa15801561100b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102f9190612c9a565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1e2ab97866001898888886040516000815260200160405260405161109a9493929190612b30565b6020604051602081039080840390855afa1580156110bc573d6000803e3d6000fd5b505050602060405103516040518363ffffffff1660e01b81526004016110e3929190612d7a565b602060405180830381865afa158015611100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111249190612c9a565b905095945050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324b7f4dd84846040518363ffffffff1660e01b815260040161118d929190612d28565b602060405180830381865afa1580156111aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ce9190612db8565b905092915050565b60004283111580156111e757504282115b905092915050565b60606000602967ffffffffffffffff81111561120e5761120d612369565b5b6040519080825280601f01601f1916602001820160405280156112405781602001600182028036833780820191505090505b509050600080600090505b60148110156114cc5760006008826112639190612e14565b866bffffffffffffffffffffffff1916901b90506000600480837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c905060006004837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c905060008160ff1610158015611310575060098160ff1611155b15611378576030816113229190612e6e565b60f81b868661133090612ea5565b9650868151811061134457611343612eed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506113d7565b6057816113859190612e6e565b60f81b868661139390612ea5565b965086815181106113a7576113a6612eed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b60008260ff16101580156113ef575060098260ff1611155b15611457576030826114019190612e6e565b60f81b868661140f90612ea5565b9650868151811061142357611422612eed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506114b6565b6057826114649190612e6e565b60f81b868661147290612ea5565b9650868151811061148657611485612eed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b50505080806114c490612ea5565b91505061124b565b508192505050919050565b60606000604167ffffffffffffffff8111156114f6576114f5612369565b5b6040519080825280601f01601f1916602001820160405280156115285781602001600182028036833780820191505090505b509050600080600090505b60208110156117a557600060088261154b9190612e14565b86901b90506000600480837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c905060006004837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c905060008160ff16101580156115e9575060098160ff1611155b15611651576030816115fb9190612e6e565b60f81b868661160990612ea5565b9650868151811061161d5761161c612eed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506116b0565b60578161165e9190612e6e565b60f81b868661166c90612ea5565b965086815181106116805761167f612eed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b60008260ff16101580156116c8575060098260ff1611155b15611730576030826116da9190612e6e565b60f81b86866116e890612ea5565b965086815181106116fc576116fb612eed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061178f565b60578261173d9190612e6e565b60f81b868661174b90612ea5565b9650868151811061175f5761175e612eed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b505050808061179d90612ea5565b915050611533565b508192505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ab2bff9898989898989896040518863ffffffff1660e01b81526004016118189796959493929190612f1c565b6020604051808303816000875af1158015611837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185b9190612c9a565b9050979650505050505050565b60007f81d2027f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806118db57506118da82611db8565b5b9050919050565b60006118f082600001611e22565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1953ea38585856040518463ffffffff1660e01b815260040161195793929190612ffd565b602060405180830381865afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119989190612c9a565b90509392505050565b6119ab8282610585565b611a7e5760016002600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611a23611af2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611a8e8383611e33565b611ae7578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611aec565b600090505b92915050565b600033905090565b611b048282610585565b611b9357611b298173ffffffffffffffffffffffffffffffffffffffff166014611e56565b611b378360001c6020611e56565b604051602001611b4892919061310f565b6040516020818303038152906040526040517feacf199d000000000000000000000000000000000000000000000000000000008152600401611b8a9190613182565b60405180910390fd5b5050565b611ba18282610585565b15611c755760006002600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611c1a611af2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008083600101600084815260200190815260200160002054905060008114611d81576000600182611cab91906131a4565b9050600060018660000180549050611cc391906131a4565b9050818114611d32576000866000018281548110611ce457611ce3612eed565b5b9060005260206000200154905080876000018481548110611d0857611d07612eed565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611d4657611d456131d8565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611d87565b60009150505b92915050565b6000826000018281548110611da557611da4612eed565b5b9060005260206000200154905092915050565b60007f6285c82e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b606060006002836002611e699190612e14565b611e739190613207565b67ffffffffffffffff811115611e8c57611e8b612369565b5b6040519080825280601f01601f191660200182016040528015611ebe5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ef657611ef5612eed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611f5a57611f59612eed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611f9a9190612e14565b611fa49190613207565b90505b6001811115612044577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611fe657611fe5612eed565b5b1a60f81b828281518110611ffd57611ffc612eed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061203d9061325d565b9050611fa7565b5060008414612088576040517feacf199d00000000000000000000000000000000000000000000000000000000815260040161207f906132d2565b60405180910390fd5b8091505092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6120b9816120a6565b81146120c457600080fd5b50565b6000813590506120d6816120b0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612107826120dc565b9050919050565b612117816120fc565b811461212257600080fd5b50565b6000813590506121348161210e565b92915050565b600080604083850312156121515761215061209c565b5b600061215f858286016120c7565b925050602061217085828601612125565b9150509250929050565b612183816120a6565b82525050565b600060208201905061219e600083018461217a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126121c9576121c86121a4565b5b8235905067ffffffffffffffff8111156121e6576121e56121a9565b5b602083019150836001820283011115612202576122016121ae565b5b9250929050565b600080600080606085870312156122235761222261209c565b5b6000612231878288016120c7565b945050602061224287828801612125565b935050604085013567ffffffffffffffff811115612263576122626120a1565b5b61226f878288016121b3565b925092505092959194509250565b60008115159050919050565b6122928161227d565b82525050565b60006020820190506122ad6000830184612289565b92915050565b6000819050919050565b6122c6816122b3565b81146122d157600080fd5b50565b6000813590506122e3816122bd565b92915050565b60008060408385031215612300576122ff61209c565b5b600061230e858286016120c7565b925050602061231f858286016122d4565b9150509250929050565b612332816120fc565b82525050565b600060208201905061234d6000830184612329565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f957a808100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123a182612358565b810181811067ffffffffffffffff821117156123c0576123bf612369565b5b80604052505050565b60006123d3612092565b90506123df8282612398565b919050565b600060a082840312156123fa576123f9612353565b5b61240460a06123c9565b9050600061241484828501612125565b600083015250602061242884828501612125565b602083015250604061243c848285016120c7565b6040830152506060612450848285016122d4565b6060830152506080612464848285016122d4565b60808301525092915050565b600060ff82169050919050565b61248681612470565b811461249157600080fd5b50565b6000813590506124a38161247d565b92915050565b60008060008061010085870312156124c4576124c361209c565b5b60006124d2878288016123e4565b94505060a06124e387828801612494565b93505060c06124f4878288016120c7565b92505060e0612505878288016120c7565b91505092959194509250565b600060a0820190506125266000830188612289565b6125336020830187612289565b6125406040830186612289565b61254d6060830185612289565b61255a6080830184612289565b9695505050505050565b60008060008060008060a087890312156125815761258061209c565b5b600061258f89828a01612125565b96505060206125a089828a016120c7565b95505060406125b189828a016122d4565b94505060606125c289828a016122d4565b935050608087013567ffffffffffffffff8111156125e3576125e26120a1565b5b6125ef89828a016121b3565b92509250509295509295509295565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612633816125fe565b811461263e57600080fd5b50565b6000813590506126508161262a565b92915050565b60006020828403121561266c5761266b61209c565b5b600061267a84828501612641565b91505092915050565b6000602082840312156126995761269861209c565b5b60006126a7848285016120c7565b91505092915050565b6126b9816122b3565b82525050565b60006020820190506126d460008301846126b0565b92915050565b600060a082840312156126f0576126ef61209c565b5b60006126fe848285016123e4565b91505092915050565b600080600060c084860312156127205761271f61209c565b5b600061272e868287016123e4565b93505060a084013567ffffffffffffffff81111561274f5761274e6120a1565b5b61275b868287016121b3565b92509250509250925092565b600082825260208201905092915050565b7f43616c6c6572206973206e6f742061207369676e657200000000000000000000600082015250565b60006127ae601683612767565b91506127b982612778565b602082019050919050565b600060208201905081810360008301526127dd816127a1565b9050919050565b7f53656e646572206861736e2774207369676e6564207468652063726564656e7460008201527f69616c0000000000000000000000000000000000000000000000000000000000602082015250565b6000612840602383612767565b915061284b826127e4565b604082019050919050565b6000602082019050818103600083015261286f81612833565b9050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006128b7600283612876565b91506128c282612881565b600282019050919050565b6000819050919050565b6128e86128e3826120a6565b6128cd565b82525050565b60006128f9826128aa565b915061290582856128d7565b60208201915061291582846128d7565b6020820191508190509392505050565b7f43616c6c6572206973206e6f7420616e20697373756572000000000000000000600082015250565b600061295b601783612767565b915061296682612925565b602082019050919050565b6000602082019050818103600083015261298a8161294e565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006129ed602f83612767565b91506129f882612991565b604082019050919050565b60006020820190508181036000830152612a1c816129e0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612a59601f83612767565b9150612a6482612a23565b602082019050919050565b60006020820190508181036000830152612a8881612a4c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612aeb602283612767565b9150612af682612a8f565b604082019050919050565b60006020820190508181036000830152612b1a81612ade565b9050919050565b612b2a81612470565b82525050565b6000608082019050612b45600083018761217a565b612b526020830186612b21565b612b5f604083018561217a565b612b6c606083018461217a565b95945050505050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612bab601883612767565b9150612bb682612b75565b602082019050919050565b60006020820190508181036000830152612bda81612b9e565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000612c0d8385612be1565b9350612c1a838584612bf2565b612c2383612358565b840190509392505050565b6000606082019050612c43600083018761217a565b612c506020830186612329565b8181036040830152612c63818486612c01565b905095945050505050565b612c778161227d565b8114612c8257600080fd5b50565b600081519050612c9481612c6e565b92915050565b600060208284031215612cb057612caf61209c565b5b6000612cbe84828501612c85565b91505092915050565b600060c082019050612cdc600083018961217a565b612ce96020830188612329565b612cf66040830187612329565b612d03606083018661217a565b612d1060808301856126b0565b612d1d60a08301846126b0565b979650505050505050565b6000604082019050612d3d600083018561217a565b612d4a6020830184612329565b9392505050565b6000604082019050612d666000830185612329565b612d73602083018461217a565b9392505050565b6000604082019050612d8f6000830185612329565b612d9c6020830184612329565b9392505050565b600081519050612db28161247d565b92915050565b600060208284031215612dce57612dcd61209c565b5b6000612ddc84828501612da3565b91505092915050565b7f957a808100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e1f826122b3565b9150612e2a836122b3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612e6357612e62612de5565b5b828202905092915050565b6000612e7982612470565b9150612e8483612470565b92508260ff03821115612e9a57612e99612de5565b5b828201905092915050565b6000612eb0826122b3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ee257612ee1612de5565b5b600182019050919050565b7f957a808100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060c082019050612f31600083018a612329565b612f3e6020830189612329565b612f4b604083018861217a565b612f5860608301876126b0565b612f6560808301866126b0565b81810360a0830152612f78818486612c01565b905098975050505050505050565b600081519050919050565b60005b83811015612faf578082015181840152602081019050612f94565b83811115612fbe576000848401525b50505050565b6000612fcf82612f86565b612fd98185612be1565b9350612fe9818560208601612f91565b612ff281612358565b840191505092915050565b6000606082019050613012600083018661217a565b61301f6020830185612329565b81810360408301526130318184612fc4565b9050949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000613071601783612876565b915061307c8261303b565b601782019050919050565b600081519050919050565b600061309d82613087565b6130a78185612876565b93506130b7818560208601612f91565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006130f9601183612876565b9150613104826130c3565b601182019050919050565b600061311a82613064565b91506131268285613092565b9150613131826130ec565b915061313d8284613092565b91508190509392505050565b600061315482613087565b61315e8185612767565b935061316e818560208601612f91565b61317781612358565b840191505092915050565b6000602082019050818103600083015261319c8184613149565b905092915050565b60006131af826122b3565b91506131ba836122b3565b9250828210156131cd576131cc612de5565b5b828203905092915050565b7f957a808100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613212826122b3565b915061321d836122b3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561325257613251612de5565b5b828201905092915050565b6000613268826122b3565b91506000820361327b5761327a612de5565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006132bc602083612767565b91506132c782613286565b602082019050919050565b600060208201905081810360008301526132eb816132af565b905091905056fea2646970667358221220b4736239fe780a2865cae354dd904866bb32d70c3848671635a755233dee8cbf64736f6c63782d302e382e31342d646576656c6f702e323032342e31322e31322b636f6d6d69742e62396362363034312e6d6f64005e"

// DeployClaimsVerifier deploys a new Ethereum contract, binding an instance of ClaimsVerifier to it.
func DeployClaimsVerifier[P crypto.PublicKey](auth *bind.TransactOpts[P], backend bind.ContractBackend[P], _registryAddress common.Address) (common.Address, *types.Transaction[P], *ClaimsVerifier[P], error) {
	parsed, err := abi.JSON[P](strings.NewReader(ClaimsVerifierABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ClaimsVerifierBin), backend, _registryAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ClaimsVerifier[P]{ClaimsVerifierCaller: ClaimsVerifierCaller[P]{contract: contract}, ClaimsVerifierTransactor: ClaimsVerifierTransactor[P]{contract: contract}, ClaimsVerifierFilterer: ClaimsVerifierFilterer[P]{contract: contract}}, nil
}

// ClaimsVerifier is an auto generated Go binding around an Ethereum contract.
type ClaimsVerifier[P crypto.PublicKey] struct {
	ClaimsVerifierCaller[P]     // Read-only binding to the contract
	ClaimsVerifierTransactor[P] // Write-only binding to the contract
	ClaimsVerifierFilterer[P]   // Log filterer for contract events
}

// ClaimsVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type ClaimsVerifierCaller[P crypto.PublicKey] struct {
	contract *bind.BoundContract[P] // Generic contract wrapper for the low level calls
}

// ClaimsVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ClaimsVerifierTransactor[P crypto.PublicKey] struct {
	contract *bind.BoundContract[P] // Generic contract wrapper for the low level calls
}

// ClaimsVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ClaimsVerifierFilterer[P crypto.PublicKey] struct {
	contract *bind.BoundContract[P] // Generic contract wrapper for the low level calls
}

// ClaimsVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ClaimsVerifierSession[P crypto.PublicKey] struct {
	Contract     *ClaimsVerifier[P]   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts[P] // Transaction auth options to use throughout this session
}

// ClaimsVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ClaimsVerifierCallerSession[P crypto.PublicKey] struct {
	Contract *ClaimsVerifierCaller[P] // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ClaimsVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ClaimsVerifierTransactorSession[P crypto.PublicKey] struct {
	Contract     *ClaimsVerifierTransactor[P] // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts[P]         // Transaction auth options to use throughout this session
}

// ClaimsVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type ClaimsVerifierRaw[P crypto.PublicKey] struct {
	Contract *ClaimsVerifier[P] // Generic contract binding to access the raw methods on
}

// ClaimsVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ClaimsVerifierCallerRaw[P crypto.PublicKey] struct {
	Contract *ClaimsVerifierCaller[P] // Generic read-only contract binding to access the raw methods on
}

// ClaimsVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ClaimsVerifierTransactorRaw[P crypto.PublicKey] struct {
	Contract *ClaimsVerifierTransactor[P] // Generic write-only contract binding to access the raw methods on
}

// NewClaimsVerifier creates a new instance of ClaimsVerifier, bound to a specific deployed contract.
func NewClaimsVerifier[P crypto.PublicKey](address common.Address, backend bind.ContractBackend[P]) (*ClaimsVerifier[P], error) {
	contract, err := bindClaimsVerifier[P](address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifier[P]{ClaimsVerifierCaller: ClaimsVerifierCaller[P]{contract: contract}, ClaimsVerifierTransactor: ClaimsVerifierTransactor[P]{contract: contract}, ClaimsVerifierFilterer: ClaimsVerifierFilterer[P]{contract: contract}}, nil
}

// NewClaimsVerifierCaller creates a new read-only instance of ClaimsVerifier, bound to a specific deployed contract.
func NewClaimsVerifierCaller[P crypto.PublicKey](address common.Address, caller bind.ContractCaller) (*ClaimsVerifierCaller[P], error) {
	contract, err := bindClaimsVerifier[P](address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierCaller[P]{contract: contract}, nil
}

// NewClaimsVerifierTransactor creates a new write-only instance of ClaimsVerifier, bound to a specific deployed contract.
func NewClaimsVerifierTransactor[P crypto.PublicKey](address common.Address, transactor bind.ContractTransactor[P]) (*ClaimsVerifierTransactor[P], error) {
	contract, err := bindClaimsVerifier[P](address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierTransactor[P]{contract: contract}, nil
}

// NewClaimsVerifierFilterer creates a new log filterer instance of ClaimsVerifier, bound to a specific deployed contract.
func NewClaimsVerifierFilterer[P crypto.PublicKey](address common.Address, filterer bind.ContractFilterer) (*ClaimsVerifierFilterer[P], error) {
	contract, err := bindClaimsVerifier[P](address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierFilterer[P]{contract: contract}, nil
}

// bindClaimsVerifier binds a generic wrapper to an already deployed contract.
func bindClaimsVerifier[P crypto.PublicKey](address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor[P], filterer bind.ContractFilterer) (*bind.BoundContract[P], error) {
	parsed, err := abi.JSON[P](strings.NewReader(ClaimsVerifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ClaimsVerifier *ClaimsVerifierRaw[P]) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ClaimsVerifier.Contract.ClaimsVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ClaimsVerifier *ClaimsVerifierRaw[P]) Transfer(opts *bind.TransactOpts[P]) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.ClaimsVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ClaimsVerifier *ClaimsVerifierRaw[P]) Transact(opts *bind.TransactOpts[P], method string, params ...interface{}) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.ClaimsVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ClaimsVerifier *ClaimsVerifierCallerRaw[P]) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ClaimsVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ClaimsVerifier *ClaimsVerifierTransactorRaw[P]) Transfer(opts *bind.TransactOpts[P]) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ClaimsVerifier *ClaimsVerifierTransactorRaw[P]) Transact(opts *bind.TransactOpts[P], method string, params ...interface{}) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0x02c1b9bd.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0x02c1b9bd.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) DEFAULTADMINROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.DEFAULTADMINROLE(&_ClaimsVerifier.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0x02c1b9bd.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) DEFAULTADMINROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.DEFAULTADMINROLE(&_ClaimsVerifier.CallOpts)
}

// ISSUERROLE is a free data retrieval call binding the contract method 0xc2b5454d.
//
// Solidity: function ISSUER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) ISSUERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "ISSUER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ISSUERROLE is a free data retrieval call binding the contract method 0xc2b5454d.
//
// Solidity: function ISSUER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) ISSUERROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.ISSUERROLE(&_ClaimsVerifier.CallOpts)
}

// ISSUERROLE is a free data retrieval call binding the contract method 0xc2b5454d.
//
// Solidity: function ISSUER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) ISSUERROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.ISSUERROLE(&_ClaimsVerifier.CallOpts)
}

// SIGNERROLE is a free data retrieval call binding the contract method 0x80e9d11a.
//
// Solidity: function SIGNER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) SIGNERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "SIGNER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SIGNERROLE is a free data retrieval call binding the contract method 0x80e9d11a.
//
// Solidity: function SIGNER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) SIGNERROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.SIGNERROLE(&_ClaimsVerifier.CallOpts)
}

// SIGNERROLE is a free data retrieval call binding the contract method 0x80e9d11a.
//
// Solidity: function SIGNER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) SIGNERROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.SIGNERROLE(&_ClaimsVerifier.CallOpts)
}

// CredentialHash is a free data retrieval call binding the contract method 0xceade62c.
//
// Solidity: function credentialHash((address,address,bytes32,uint256,uint256) vc) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) CredentialHash(opts *bind.CallOpts, vc ClaimTypesVerifiableCredential[P]) ([32]byte, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "credentialHash", vc)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CredentialHash is a free data retrieval call binding the contract method 0xceade62c.
//
// Solidity: function credentialHash((address,address,bytes32,uint256,uint256) vc) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) CredentialHash(vc ClaimTypesVerifiableCredential[P]) ([32]byte, error) {
	return _ClaimsVerifier.Contract.CredentialHash(&_ClaimsVerifier.CallOpts, vc)
}

// CredentialHash is a free data retrieval call binding the contract method 0xceade62c.
//
// Solidity: function credentialHash((address,address,bytes32,uint256,uint256) vc) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) CredentialHash(vc ClaimTypesVerifiableCredential[P]) ([32]byte, error) {
	return _ClaimsVerifier.Contract.CredentialHash(&_ClaimsVerifier.CallOpts, vc)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0xb057d63b.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0xb057d63b.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ClaimsVerifier.Contract.GetRoleAdmin(&_ClaimsVerifier.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0xb057d63b.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ClaimsVerifier.Contract.GetRoleAdmin(&_ClaimsVerifier.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x366f8b95.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x366f8b95.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _ClaimsVerifier.Contract.GetRoleMember(&_ClaimsVerifier.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x366f8b95.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _ClaimsVerifier.Contract.GetRoleMember(&_ClaimsVerifier.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xaa6aa773.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xaa6aa773.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _ClaimsVerifier.Contract.GetRoleMemberCount(&_ClaimsVerifier.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xaa6aa773.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _ClaimsVerifier.Contract.GetRoleMemberCount(&_ClaimsVerifier.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x2663b6bb.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x2663b6bb.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ClaimsVerifier.Contract.HasRole(&_ClaimsVerifier.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x2663b6bb.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ClaimsVerifier.Contract.HasRole(&_ClaimsVerifier.CallOpts, role, account)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x6285c82e.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x6285c82e.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ClaimsVerifier.Contract.SupportsInterface(&_ClaimsVerifier.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x6285c82e.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ClaimsVerifier.Contract.SupportsInterface(&_ClaimsVerifier.CallOpts, interfaceId)
}

// VerifyCredential is a free data retrieval call binding the contract method 0x388665a4.
//
// Solidity: function verifyCredential((address,address,bytes32,uint256,uint256) vc, uint8 v, bytes32 r, bytes32 s) view returns(bool, bool, bool, bool, bool)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) VerifyCredential(opts *bind.CallOpts, vc ClaimTypesVerifiableCredential[P], v uint8, r [32]byte, s [32]byte) (bool, bool, bool, bool, bool, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "verifyCredential", vc, v, r, s)

	if err != nil {
		return *new(bool), *new(bool), *new(bool), *new(bool), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new(bool)).(*bool)
	out3 := *abi.ConvertType(out[3], new(bool)).(*bool)
	out4 := *abi.ConvertType(out[4], new(bool)).(*bool)

	return out0, out1, out2, out3, out4, err

}

// VerifyCredential is a free data retrieval call binding the contract method 0x388665a4.
//
// Solidity: function verifyCredential((address,address,bytes32,uint256,uint256) vc, uint8 v, bytes32 r, bytes32 s) view returns(bool, bool, bool, bool, bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) VerifyCredential(vc ClaimTypesVerifiableCredential[P], v uint8, r [32]byte, s [32]byte) (bool, bool, bool, bool, bool, error) {
	return _ClaimsVerifier.Contract.VerifyCredential(&_ClaimsVerifier.CallOpts, vc, v, r, s)
}

// VerifyCredential is a free data retrieval call binding the contract method 0x388665a4.
//
// Solidity: function verifyCredential((address,address,bytes32,uint256,uint256) vc, uint8 v, bytes32 r, bytes32 s) view returns(bool, bool, bool, bool, bool)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) VerifyCredential(vc ClaimTypesVerifiableCredential[P], v uint8, r [32]byte, s [32]byte) (bool, bool, bool, bool, bool, error) {
	return _ClaimsVerifier.Contract.VerifyCredential(&_ClaimsVerifier.CallOpts, vc, v, r, s)
}

// VerifySigner is a free data retrieval call binding the contract method 0xf47a1726.
//
// Solidity: function verifySigner((address,address,bytes32,uint256,uint256) vc, bytes _signature) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) VerifySigner(opts *bind.CallOpts, vc ClaimTypesVerifiableCredential[P], _signature []byte) (bool, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "verifySigner", vc, _signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifySigner is a free data retrieval call binding the contract method 0xf47a1726.
//
// Solidity: function verifySigner((address,address,bytes32,uint256,uint256) vc, bytes _signature) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) VerifySigner(vc ClaimTypesVerifiableCredential[P], _signature []byte) (bool, error) {
	return _ClaimsVerifier.Contract.VerifySigner(&_ClaimsVerifier.CallOpts, vc, _signature)
}

// VerifySigner is a free data retrieval call binding the contract method 0xf47a1726.
//
// Solidity: function verifySigner((address,address,bytes32,uint256,uint256) vc, bytes _signature) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) VerifySigner(vc ClaimTypesVerifiableCredential[P], _signature []byte) (bool, error) {
	return _ClaimsVerifier.Contract.VerifySigner(&_ClaimsVerifier.CallOpts, vc, _signature)
}

// GrantRole is a paid mutator transaction binding the contract method 0x18d78556.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactor[P]) GrantRole(opts *bind.TransactOpts[P], role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x18d78556.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierSession[P]) GrantRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.GrantRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x18d78556.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactorSession[P]) GrantRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.GrantRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// RegisterCredential is a paid mutator transaction binding the contract method 0x41604839.
//
// Solidity: function registerCredential(address _subject, bytes32 _credentialHash, uint256 _from, uint256 _exp, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierTransactor[P]) RegisterCredential(opts *bind.TransactOpts[P], _subject common.Address, _credentialHash [32]byte, _from *big.Int, _exp *big.Int, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.contract.Transact(opts, "registerCredential", _subject, _credentialHash, _from, _exp, _signature)
}

// RegisterCredential is a paid mutator transaction binding the contract method 0x41604839.
//
// Solidity: function registerCredential(address _subject, bytes32 _credentialHash, uint256 _from, uint256 _exp, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) RegisterCredential(_subject common.Address, _credentialHash [32]byte, _from *big.Int, _exp *big.Int, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RegisterCredential(&_ClaimsVerifier.TransactOpts, _subject, _credentialHash, _from, _exp, _signature)
}

// RegisterCredential is a paid mutator transaction binding the contract method 0x41604839.
//
// Solidity: function registerCredential(address _subject, bytes32 _credentialHash, uint256 _from, uint256 _exp, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierTransactorSession[P]) RegisterCredential(_subject common.Address, _credentialHash [32]byte, _from *big.Int, _exp *big.Int, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RegisterCredential(&_ClaimsVerifier.TransactOpts, _subject, _credentialHash, _from, _exp, _signature)
}

// RegisterSignature is a paid mutator transaction binding the contract method 0x1b902b21.
//
// Solidity: function registerSignature(bytes32 _credentialHash, address issuer, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierTransactor[P]) RegisterSignature(opts *bind.TransactOpts[P], _credentialHash [32]byte, issuer common.Address, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.contract.Transact(opts, "registerSignature", _credentialHash, issuer, _signature)
}

// RegisterSignature is a paid mutator transaction binding the contract method 0x1b902b21.
//
// Solidity: function registerSignature(bytes32 _credentialHash, address issuer, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) RegisterSignature(_credentialHash [32]byte, issuer common.Address, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RegisterSignature(&_ClaimsVerifier.TransactOpts, _credentialHash, issuer, _signature)
}

// RegisterSignature is a paid mutator transaction binding the contract method 0x1b902b21.
//
// Solidity: function registerSignature(bytes32 _credentialHash, address issuer, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierTransactorSession[P]) RegisterSignature(_credentialHash [32]byte, issuer common.Address, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RegisterSignature(&_ClaimsVerifier.TransactOpts, _credentialHash, issuer, _signature)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x0d2bdc94.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactor[P]) RenounceRole(opts *bind.TransactOpts[P], role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x0d2bdc94.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierSession[P]) RenounceRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RenounceRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x0d2bdc94.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactorSession[P]) RenounceRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RenounceRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0x021a3b3d.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactor[P]) RevokeRole(opts *bind.TransactOpts[P], role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0x021a3b3d.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierSession[P]) RevokeRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RevokeRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0x021a3b3d.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactorSession[P]) RevokeRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RevokeRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// ClaimsVerifierRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleAdminChangedIterator[P crypto.PublicKey] struct {
	Event *ClaimsVerifierRoleAdminChanged[P] // Event containing the contract specifics and raw log

	contract *bind.BoundContract[P] // Generic contract to use for unpacking event data
	event    string                 // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClaimsVerifierRoleAdminChangedIterator[P]) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClaimsVerifierRoleAdminChanged[P])
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClaimsVerifierRoleAdminChanged[P])
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClaimsVerifierRoleAdminChangedIterator[P]) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClaimsVerifierRoleAdminChangedIterator[P]) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClaimsVerifierRoleAdminChanged represents a RoleAdminChanged event raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleAdminChanged[P crypto.PublicKey] struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0x5869f515290d9be6c9e59e5ac9e30ab203179836538222cd924156e640cd682a.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*ClaimsVerifierRoleAdminChangedIterator[P], error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierRoleAdminChangedIterator[P]{contract: _ClaimsVerifier.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0x5869f515290d9be6c9e59e5ac9e30ab203179836538222cd924156e640cd682a.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *ClaimsVerifierRoleAdminChanged[P], role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClaimsVerifierRoleAdminChanged[P])
				if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0x5869f515290d9be6c9e59e5ac9e30ab203179836538222cd924156e640cd682a.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) ParseRoleAdminChanged(log types.Log) (*ClaimsVerifierRoleAdminChanged[P], error) {
	event := new(ClaimsVerifierRoleAdminChanged[P])
	if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClaimsVerifierRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleGrantedIterator[P crypto.PublicKey] struct {
	Event *ClaimsVerifierRoleGranted[P] // Event containing the contract specifics and raw log

	contract *bind.BoundContract[P] // Generic contract to use for unpacking event data
	event    string                 // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClaimsVerifierRoleGrantedIterator[P]) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClaimsVerifierRoleGranted[P])
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClaimsVerifierRoleGranted[P])
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClaimsVerifierRoleGrantedIterator[P]) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClaimsVerifierRoleGrantedIterator[P]) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClaimsVerifierRoleGranted represents a RoleGranted event raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleGranted[P crypto.PublicKey] struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0xbf0b37f87273ba8c10496cdf7bef7c481e339ac47a73c99eaa62cd15c43c96d7.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ClaimsVerifierRoleGrantedIterator[P], error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierRoleGrantedIterator[P]{contract: _ClaimsVerifier.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0xbf0b37f87273ba8c10496cdf7bef7c481e339ac47a73c99eaa62cd15c43c96d7.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ClaimsVerifierRoleGranted[P], role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClaimsVerifierRoleGranted[P])
				if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0xbf0b37f87273ba8c10496cdf7bef7c481e339ac47a73c99eaa62cd15c43c96d7.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) ParseRoleGranted(log types.Log) (*ClaimsVerifierRoleGranted[P], error) {
	event := new(ClaimsVerifierRoleGranted[P])
	if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClaimsVerifierRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleRevokedIterator[P crypto.PublicKey] struct {
	Event *ClaimsVerifierRoleRevoked[P] // Event containing the contract specifics and raw log

	contract *bind.BoundContract[P] // Generic contract to use for unpacking event data
	event    string                 // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClaimsVerifierRoleRevokedIterator[P]) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClaimsVerifierRoleRevoked[P])
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClaimsVerifierRoleRevoked[P])
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClaimsVerifierRoleRevokedIterator[P]) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClaimsVerifierRoleRevokedIterator[P]) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClaimsVerifierRoleRevoked represents a RoleRevoked event raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleRevoked[P crypto.PublicKey] struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xe89d5f289310a1cb6f80090b58e23b4b6ecdf323f60c227b0bc1fad7810dfd63.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ClaimsVerifierRoleRevokedIterator[P], error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierRoleRevokedIterator[P]{contract: _ClaimsVerifier.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}


// WatchRoleRevoked is a free log subscription operation binding the contract event 0xe89d5f289310a1cb6f80090b58e23b4b6ecdf323f60c227b0bc1fad7810dfd63.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ClaimsVerifierRoleRevoked[P], role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClaimsVerifierRoleRevoked[P])
				if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xe89d5f289310a1cb6f80090b58e23b4b6ecdf323f60c227b0bc1fad7810dfd63.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) ParseRoleRevoked(log types.Log) (*ClaimsVerifierRoleRevoked[P], error) {
	event := new(ClaimsVerifierRoleRevoked[P])
	if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
