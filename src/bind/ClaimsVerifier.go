// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bind

import (
	"math/big"
	"strings"

	ethereum "github.com/MIRChain/MIR"
	"github.com/MIRChain/MIR/accounts/abi"
	"github.com/MIRChain/MIR/accounts/abi/bind"
	"github.com/MIRChain/MIR/common"
	"github.com/MIRChain/MIR/core/types"
	"github.com/MIRChain/MIR/crypto"
	"github.com/MIRChain/MIR/crypto/gost3410"
	"github.com/MIRChain/MIR/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = common.Big1
	_ = event.NewSubscription
)

// ClaimTypesVerifiableCredential is an auto generated low-level Go binding around an user-defined struct.
type ClaimTypesVerifiableCredential[P crypto.PublicKey] struct {
	Issuer    common.Address
	Subject   common.Address
	Data      [32]byte
	ValidFrom *big.Int
	ValidTo   *big.Int
}

// ClaimsVerifierABI is the input ABI used to generate the binding from.
const ClaimsVerifierABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISSUER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"}],\"internalType\":\"structClaimTypes.VerifiableCredential\",\"name\":\"vc\",\"type\":\"tuple\"}],\"name\":\"credentialHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subject\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_credentialHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"registerCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_credentialHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"registerSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"}],\"internalType\":\"structClaimTypes.VerifiableCredential\",\"name\":\"vc\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"verifyCredential\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"validFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"}],\"internalType\":\"structClaimTypes.VerifiableCredential\",\"name\":\"vc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifySigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

var ClaimsVerifierParsedABI, _ = abi.JSON[gost3410.PublicKey](strings.NewReader(ClaimsVerifierABI))

// ClaimsVerifierBin is the compiled bytecode used for deploying new contracts.
var ClaimsVerifierBin = "0x60806040523480156200001157600080fd5b50604051620032ed380380620032ed8339818101604052810190620000379190620004d1565b6040518060400160405280600c81526020017f454950373132446f6d61696e00000000000000000000000000000000000000008152506040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506209e5513084620000f060405180608001604052808781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff168152506200015760201b60201c565b600181905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050620001506000801b33620001cf60201b60201c565b50620005a7565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82600001518051906020012083602001518051906020012084604001518560600151604051602001620001b29594939291906200054a565b604051602081830303815290604052805190602001209050919050565b620001e18282620001e560201b60201c565b5050565b620001fc82826200022d60201b62000ad01760201c565b6200022881600360008581526020019081526020016000206200031f60201b62000bb11790919060201c565b505050565b6200023f82826200035760201b60201c565b6200031b5760016002600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002c0620003c260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006200034f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620003ca60201b60201c565b905092915050565b60006002600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6000620003de83836200044460201b60201c565b620004395782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506200043e565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000499826200046c565b9050919050565b620004ab816200048c565b8114620004b757600080fd5b50565b600081519050620004cb81620004a0565b92915050565b600060208284031215620004ea57620004e962000467565b5b6000620004fa84828501620004ba565b91505092915050565b6000819050919050565b620005188162000503565b82525050565b6000819050919050565b62000533816200051e565b82525050565b62000544816200048c565b82525050565b600060a0820190506200056160008301886200050d565b6200057060208301876200050d565b6200057f60408301866200050d565b6200058e606083018562000528565b6200059d608083018462000539565b9695505050505050565b612d3680620005b76000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806386e8272411610097578063a1ebf35d11610066578063a1ebf35d1461030f578063a217fddf1461032d578063ca15c8731461034b578063d547741f1461037b57610100565b806386e827241461024f5780639010d07c1461027f5780639137ebec146102af57806391d14854146102df57610100565b80632f2ff15d116100d35780632f2ff15d146101c957806336568abe146101e5578063448684ac1461020157806382aefa241461023157610100565b806301ffc9a7146101055780630d60c469146101355780630de5ed7c14610169578063248a9ca314610199575b600080fd5b61011f600480360381019061011a9190611b3c565b610397565b60405161012c9190611b84565b60405180910390f35b61014f600480360381019061014a9190611dbf565b610411565b604051610160959493929190611e27565b60405180910390f35b610183600480360381019061017e9190611e7a565b6104df565b6040516101909190611eb6565b60405180910390f35b6101b360048036038101906101ae9190611ed1565b610520565b6040516101c09190611eb6565b60405180910390f35b6101e360048036038101906101de9190611efe565b610540565b005b6101ff60048036038101906101fa9190611efe565b610561565b005b61021b60048036038101906102169190611fa3565b6105e4565b6040516102289190611b84565b60405180910390f35b61023961072f565b6040516102469190611eb6565b60405180910390f35b61026960048036038101906102649190612017565b610753565b6040516102769190611b84565b60405180910390f35b61029960048036038101906102949190612077565b610876565b6040516102a691906120c6565b60405180910390f35b6102c960048036038101906102c491906120e1565b6108a5565b6040516102d69190611b84565b60405180910390f35b6102f960048036038101906102f49190611efe565b6109f5565b6040516103069190611b84565b60405180910390f35b610317610a60565b6040516103249190611eb6565b60405180910390f35b610335610a84565b6040516103429190611eb6565b60405180910390f35b61036560048036038101906103609190611ed1565b610a8b565b604051610372919061218a565b60405180910390f35b61039560048036038101906103909190611efe565b610aaf565b005b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061040a575061040982610be1565b5b9050919050565b6000806000806000806001546104268b610c5b565b60405160200161043792919061221d565b60405160208183030381529060405280519060200120905061045d818b60000151610cc9565b61046b828c60000151610d70565b61047c838d600001518d8d8d610e17565b6104a57fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70610a8b565b6104b3858f60000151610f0f565b60ff16146104c98e606001518f60800151610fb6565b9550955095509550955050945094509450945094565b6000806001546104ee84610c5b565b6040516020016104ff92919061221d565b60405160208183030381529060405280519060200120905080915050919050565b600060026000838152602001908152602001600020600101549050919050565b61054982610520565b61055281610fcf565b61055c8383610fe3565b505050565b610569611017565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd906122d7565b60405180910390fd5b6105e0828261101f565b5050565b60006106107fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70336109f5565b61064f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064690612343565b60405180910390fd5b60006106a884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508761105390919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610718576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f906123d5565b60405180910390fd5b61072486868686611243565b915050949350505050565b7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12281565b60008060015461076286610c5b565b60405160200161077392919061221d565b60405160208183030381529060405280519060200120905060006107e485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508361105390919063ffffffff16565b90506108107fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70826109f5565b801561086b575061086a82876000015187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506112f2565b5b925050509392505050565b600061089d826003600086815260200190815260200160002061139c90919063ffffffff16565b905092915050565b60006108d17f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa122336109f5565b610910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090790612441565b60405180910390fd5b600061096984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508861105390919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d0906123d5565b60405180910390fd5b6109e8338989898989896113b6565b9150509695505050505050565b60006002600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7fe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f7081565b6000801b81565b6000610aa86003600084815260200190815260200160002061146e565b9050919050565b610ab882610520565b610ac181610fcf565b610acb838361101f565b505050565b610ada82826109f5565b610bad5760016002600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b52611017565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000610bd9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611483565b905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c545750610c53826114f3565b5b9050919050565b60007f057aaf322c79d4b390549d58e7c9e54049c8146bdb31538929442a557873670282600001518360200151846040015185606001518660800151604051602001610cac96959493929190612461565b604051602081830303815290604052805190602001209050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663957839d984846040518363ffffffff1660e01b8152600401610d279291906124c2565b602060405180830381865afa158015610d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d689190612517565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6d76ed583856040518363ffffffff1660e01b8152600401610dce929190612544565b602060405180830381865afa158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f9190612517565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166387cf356e8660018988888860405160008152602001604052604051610e7a949392919061257c565b6020604051602081039080840390855afa158015610e9c573d6000803e3d6000fd5b505050602060405103516040518363ffffffff1660e01b8152600401610ec39291906125c1565b602060405180830381865afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f049190612517565b905095945050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306b15df484846040518363ffffffff1660e01b8152600401610f6d9291906124c2565b602060405180830381865afa158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae91906125ff565b905092915050565b6000428311158015610fc757504282115b905092915050565b610fe081610fdb611017565b61155d565b50565b610fed8282610ad0565b6110128160036000858152602001908152602001600020610bb190919063ffffffff16565b505050565b600033905090565b61102982826115e2565b61104e81600360008581526020019081526020016000206116c490919063ffffffff16565b505050565b60006041825114611099576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109090612678565b60405180910390fd5b60008060006020850151925060408501519150606085015160001a90507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c111561111c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111139061270a565b60405180910390fd5b601b8160ff16141580156111345750601c8160ff1614155b15611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116b9061279c565b60405180910390fd5b600060018783868660405160008152602001604052604051611199949392919061257c565b6020604051602081039080840390855afa1580156111bb573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122d90612808565b60405180910390fd5b8094505050505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663448684ac868686866040518563ffffffff1660e01b81526004016112a59493929190612875565b6020604051808303816000875af11580156112c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e89190612517565b9050949350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663701ee4638585856040518463ffffffff1660e01b815260040161135293929190612923565b602060405180830381865afa15801561136f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113939190612517565b90509392505050565b60006113ab83600001836116f4565b60001c905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375130747898989898989896040518863ffffffff1660e01b815260040161141e9796959493929190612961565b6020604051808303816000875af115801561143d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114619190612517565b9050979650505050505050565b600061147c8260000161171f565b9050919050565b600061148f8383611730565b6114e85782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506114ed565b600090505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61156782826109f5565b6115de5761157481611753565b6115828360001c6020611780565b604051602001611593929190612a9f565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d59190612b12565b60405180910390fd5b5050565b6115ec82826109f5565b156116c05760006002600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611665611017565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006116ec836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6119bc565b905092915050565b600082600001828154811061170c5761170b612b34565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60606117798273ffffffffffffffffffffffffffffffffffffffff16601460ff16611780565b9050919050565b6060600060028360026117939190612b92565b61179d9190612bd4565b67ffffffffffffffff8111156117b6576117b5611bb5565b5b6040519080825280601f01601f1916602001820160405280156117e85781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106118205761181f612b34565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061188457611883612b34565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026118c49190612b92565b6118ce9190612bd4565b90505b600181111561196e577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106119105761190f612b34565b5b1a60f81b82828151811061192757611926612b34565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061196790612c08565b90506118d1565b50600084146119b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a990612c7d565b60405180910390fd5b8091505092915050565b60008083600101600084815260200190815260200160002054905060008114611ac45760006001826119ee9190612c9d565b9050600060018660000180549050611a069190612c9d565b9050818114611a75576000866000018281548110611a2757611a26612b34565b5b9060005260206000200154905080876000018481548110611a4b57611a4a612b34565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611a8957611a88612cd1565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611aca565b60009150505b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b1981611ae4565b8114611b2457600080fd5b50565b600081359050611b3681611b10565b92915050565b600060208284031215611b5257611b51611ada565b5b6000611b6084828501611b27565b91505092915050565b60008115159050919050565b611b7e81611b69565b82525050565b6000602082019050611b996000830184611b75565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bed82611ba4565b810181811067ffffffffffffffff82111715611c0c57611c0b611bb5565b5b80604052505050565b6000611c1f611ad0565b9050611c2b8282611be4565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c5b82611c30565b9050919050565b611c6b81611c50565b8114611c7657600080fd5b50565b600081359050611c8881611c62565b92915050565b6000819050919050565b611ca181611c8e565b8114611cac57600080fd5b50565b600081359050611cbe81611c98565b92915050565b6000819050919050565b611cd781611cc4565b8114611ce257600080fd5b50565b600081359050611cf481611cce565b92915050565b600060a08284031215611d1057611d0f611b9f565b5b611d1a60a0611c15565b90506000611d2a84828501611c79565b6000830152506020611d3e84828501611c79565b6020830152506040611d5284828501611caf565b6040830152506060611d6684828501611ce5565b6060830152506080611d7a84828501611ce5565b60808301525092915050565b600060ff82169050919050565b611d9c81611d86565b8114611da757600080fd5b50565b600081359050611db981611d93565b92915050565b6000806000806101008587031215611dda57611dd9611ada565b5b6000611de887828801611cfa565b94505060a0611df987828801611daa565b93505060c0611e0a87828801611caf565b92505060e0611e1b87828801611caf565b91505092959194509250565b600060a082019050611e3c6000830188611b75565b611e496020830187611b75565b611e566040830186611b75565b611e636060830185611b75565b611e706080830184611b75565b9695505050505050565b600060a08284031215611e9057611e8f611ada565b5b6000611e9e84828501611cfa565b91505092915050565b611eb081611c8e565b82525050565b6000602082019050611ecb6000830184611ea7565b92915050565b600060208284031215611ee757611ee6611ada565b5b6000611ef584828501611caf565b91505092915050565b60008060408385031215611f1557611f14611ada565b5b6000611f2385828601611caf565b9250506020611f3485828601611c79565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112611f6357611f62611f3e565b5b8235905067ffffffffffffffff811115611f8057611f7f611f43565b5b602083019150836001820283011115611f9c57611f9b611f48565b5b9250929050565b60008060008060608587031215611fbd57611fbc611ada565b5b6000611fcb87828801611caf565b9450506020611fdc87828801611c79565b935050604085013567ffffffffffffffff811115611ffd57611ffc611adf565b5b61200987828801611f4d565b925092505092959194509250565b600080600060c084860312156120305761202f611ada565b5b600061203e86828701611cfa565b93505060a084013567ffffffffffffffff81111561205f5761205e611adf565b5b61206b86828701611f4d565b92509250509250925092565b6000806040838503121561208e5761208d611ada565b5b600061209c85828601611caf565b92505060206120ad85828601611ce5565b9150509250929050565b6120c081611c50565b82525050565b60006020820190506120db60008301846120b7565b92915050565b60008060008060008060a087890312156120fe576120fd611ada565b5b600061210c89828a01611c79565b965050602061211d89828a01611caf565b955050604061212e89828a01611ce5565b945050606061213f89828a01611ce5565b935050608087013567ffffffffffffffff8111156121605761215f611adf565b5b61216c89828a01611f4d565b92509250509295509295509295565b61218481611cc4565b82525050565b600060208201905061219f600083018461217b565b92915050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006121e66002836121a5565b91506121f1826121b0565b600282019050919050565b6000819050919050565b61221761221282611c8e565b6121fc565b82525050565b6000612228826121d9565b91506122348285612206565b6020820191506122448284612206565b6020820191508190509392505050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006122c1602f83612254565b91506122cc82612265565b604082019050919050565b600060208201905081810360008301526122f0816122b4565b9050919050565b7f43616c6c6572206973206e6f742061207369676e657200000000000000000000600082015250565b600061232d601683612254565b9150612338826122f7565b602082019050919050565b6000602082019050818103600083015261235c81612320565b9050919050565b7f53656e646572206861736e2774207369676e6564207468652063726564656e7460008201527f69616c0000000000000000000000000000000000000000000000000000000000602082015250565b60006123bf602383612254565b91506123ca82612363565b604082019050919050565b600060208201905081810360008301526123ee816123b2565b9050919050565b7f43616c6c6572206973206e6f7420616e20697373756572000000000000000000600082015250565b600061242b601783612254565b9150612436826123f5565b602082019050919050565b6000602082019050818103600083015261245a8161241e565b9050919050565b600060c0820190506124766000830189611ea7565b61248360208301886120b7565b61249060408301876120b7565b61249d6060830186611ea7565b6124aa608083018561217b565b6124b760a083018461217b565b979650505050505050565b60006040820190506124d76000830185611ea7565b6124e460208301846120b7565b9392505050565b6124f481611b69565b81146124ff57600080fd5b50565b600081519050612511816124eb565b92915050565b60006020828403121561252d5761252c611ada565b5b600061253b84828501612502565b91505092915050565b600060408201905061255960008301856120b7565b6125666020830184611ea7565b9392505050565b61257681611d86565b82525050565b60006080820190506125916000830187611ea7565b61259e602083018661256d565b6125ab6040830185611ea7565b6125b86060830184611ea7565b95945050505050565b60006040820190506125d660008301856120b7565b6125e360208301846120b7565b9392505050565b6000815190506125f981611d93565b92915050565b60006020828403121561261557612614611ada565b5b6000612623848285016125ea565b91505092915050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612662601f83612254565b915061266d8261262c565b602082019050919050565b6000602082019050818103600083015261269181612655565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006126f4602283612254565b91506126ff82612698565b604082019050919050565b60006020820190508181036000830152612723816126e7565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612786602283612254565b91506127918261272a565b604082019050919050565b600060208201905081810360008301526127b581612779565b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006127f2601883612254565b91506127fd826127bc565b602082019050919050565b60006020820190508181036000830152612821816127e5565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b60006128548385612828565b9350612861838584612839565b61286a83611ba4565b840190509392505050565b600060608201905061288a6000830187611ea7565b61289760208301866120b7565b81810360408301526128aa818486612848565b905095945050505050565b600081519050919050565b60005b838110156128de5780820151818401526020810190506128c3565b60008484015250505050565b60006128f5826128b5565b6128ff8185612828565b935061290f8185602086016128c0565b61291881611ba4565b840191505092915050565b60006060820190506129386000830186611ea7565b61294560208301856120b7565b818103604083015261295781846128ea565b9050949350505050565b600060c082019050612976600083018a6120b7565b61298360208301896120b7565b6129906040830188611ea7565b61299d606083018761217b565b6129aa608083018661217b565b81810360a08301526129bd818486612848565b905098975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612a016017836121a5565b9150612a0c826129cb565b601782019050919050565b600081519050919050565b6000612a2d82612a17565b612a3781856121a5565b9350612a478185602086016128c0565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612a896011836121a5565b9150612a9482612a53565b601182019050919050565b6000612aaa826129f4565b9150612ab68285612a22565b9150612ac182612a7c565b9150612acd8284612a22565b91508190509392505050565b6000612ae482612a17565b612aee8185612254565b9350612afe8185602086016128c0565b612b0781611ba4565b840191505092915050565b60006020820190508181036000830152612b2c8184612ad9565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b9d82611cc4565b9150612ba883611cc4565b9250828202612bb681611cc4565b91508282048414831517612bcd57612bcc612b63565b5b5092915050565b6000612bdf82611cc4565b9150612bea83611cc4565b9250828201905080821115612c0257612c01612b63565b5b92915050565b6000612c1382611cc4565b915060008203612c2657612c25612b63565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612c67602083612254565b9150612c7282612c31565b602082019050919050565b60006020820190508181036000830152612c9681612c5a565b9050919050565b6000612ca882611cc4565b9150612cb383611cc4565b9250828203905081811115612ccb57612cca612b63565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220c39c834a55a592fcccfd774af0f7d338e37b4a472a5afd8dfcbda10db64637bc64736f6c63430008120033"

// DeployClaimsVerifier deploys a new Ethereum contract, binding an instance of ClaimsVerifier to it.
func DeployClaimsVerifier[P crypto.PublicKey](auth *bind.TransactOpts[P], backend bind.ContractBackend[P], _registryAddress common.Address) (common.Address, *types.Transaction[P], *ClaimsVerifier[P], error) {
	parsed, err := abi.JSON[P](strings.NewReader(ClaimsVerifierABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ClaimsVerifierBin), backend, _registryAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ClaimsVerifier[P]{ClaimsVerifierCaller: ClaimsVerifierCaller[P]{contract: contract}, ClaimsVerifierTransactor: ClaimsVerifierTransactor[P]{contract: contract}, ClaimsVerifierFilterer: ClaimsVerifierFilterer[P]{contract: contract}}, nil
}

// ClaimsVerifier is an auto generated Go binding around an Ethereum contract.
type ClaimsVerifier[P crypto.PublicKey] struct {
	ClaimsVerifierCaller[P]     // Read-only binding to the contract
	ClaimsVerifierTransactor[P] // Write-only binding to the contract
	ClaimsVerifierFilterer[P]   // Log filterer for contract events
}

// ClaimsVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type ClaimsVerifierCaller[P crypto.PublicKey] struct {
	contract *bind.BoundContract[P] // Generic contract wrapper for the low level calls
}

// ClaimsVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ClaimsVerifierTransactor[P crypto.PublicKey] struct {
	contract *bind.BoundContract[P] // Generic contract wrapper for the low level calls
}

// ClaimsVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ClaimsVerifierFilterer[P crypto.PublicKey] struct {
	contract *bind.BoundContract[P] // Generic contract wrapper for the low level calls
}

// ClaimsVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ClaimsVerifierSession[P crypto.PublicKey] struct {
	Contract     *ClaimsVerifier[P]   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts[P] // Transaction auth options to use throughout this session
}

// ClaimsVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ClaimsVerifierCallerSession[P crypto.PublicKey] struct {
	Contract *ClaimsVerifierCaller[P] // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ClaimsVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ClaimsVerifierTransactorSession[P crypto.PublicKey] struct {
	Contract     *ClaimsVerifierTransactor[P] // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts[P]         // Transaction auth options to use throughout this session
}

// ClaimsVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type ClaimsVerifierRaw[P crypto.PublicKey] struct {
	Contract *ClaimsVerifier[P] // Generic contract binding to access the raw methods on
}

// ClaimsVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ClaimsVerifierCallerRaw[P crypto.PublicKey] struct {
	Contract *ClaimsVerifierCaller[P] // Generic read-only contract binding to access the raw methods on
}

// ClaimsVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ClaimsVerifierTransactorRaw[P crypto.PublicKey] struct {
	Contract *ClaimsVerifierTransactor[P] // Generic write-only contract binding to access the raw methods on
}

// NewClaimsVerifier creates a new instance of ClaimsVerifier, bound to a specific deployed contract.
func NewClaimsVerifier[P crypto.PublicKey](address common.Address, backend bind.ContractBackend[P]) (*ClaimsVerifier[P], error) {
	contract, err := bindClaimsVerifier[P](address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifier[P]{ClaimsVerifierCaller: ClaimsVerifierCaller[P]{contract: contract}, ClaimsVerifierTransactor: ClaimsVerifierTransactor[P]{contract: contract}, ClaimsVerifierFilterer: ClaimsVerifierFilterer[P]{contract: contract}}, nil
}

// NewClaimsVerifierCaller creates a new read-only instance of ClaimsVerifier, bound to a specific deployed contract.
func NewClaimsVerifierCaller[P crypto.PublicKey](address common.Address, caller bind.ContractCaller) (*ClaimsVerifierCaller[P], error) {
	contract, err := bindClaimsVerifier[P](address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierCaller[P]{contract: contract}, nil
}

// NewClaimsVerifierTransactor creates a new write-only instance of ClaimsVerifier, bound to a specific deployed contract.
func NewClaimsVerifierTransactor[P crypto.PublicKey](address common.Address, transactor bind.ContractTransactor[P]) (*ClaimsVerifierTransactor[P], error) {
	contract, err := bindClaimsVerifier[P](address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierTransactor[P]{contract: contract}, nil
}

// NewClaimsVerifierFilterer creates a new log filterer instance of ClaimsVerifier, bound to a specific deployed contract.
func NewClaimsVerifierFilterer[P crypto.PublicKey](address common.Address, filterer bind.ContractFilterer) (*ClaimsVerifierFilterer[P], error) {
	contract, err := bindClaimsVerifier[P](address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierFilterer[P]{contract: contract}, nil
}

// bindClaimsVerifier binds a generic wrapper to an already deployed contract.
func bindClaimsVerifier[P crypto.PublicKey](address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor[P], filterer bind.ContractFilterer) (*bind.BoundContract[P], error) {
	parsed, err := abi.JSON[P](strings.NewReader(ClaimsVerifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ClaimsVerifier *ClaimsVerifierRaw[P]) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ClaimsVerifier.Contract.ClaimsVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ClaimsVerifier *ClaimsVerifierRaw[P]) Transfer(opts *bind.TransactOpts[P]) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.ClaimsVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ClaimsVerifier *ClaimsVerifierRaw[P]) Transact(opts *bind.TransactOpts[P], method string, params ...interface{}) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.ClaimsVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ClaimsVerifier *ClaimsVerifierCallerRaw[P]) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ClaimsVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ClaimsVerifier *ClaimsVerifierTransactorRaw[P]) Transfer(opts *bind.TransactOpts[P]) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ClaimsVerifier *ClaimsVerifierTransactorRaw[P]) Transact(opts *bind.TransactOpts[P], method string, params ...interface{}) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) DEFAULTADMINROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.DEFAULTADMINROLE(&_ClaimsVerifier.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) DEFAULTADMINROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.DEFAULTADMINROLE(&_ClaimsVerifier.CallOpts)
}

// ISSUERROLE is a free data retrieval call binding the contract method 0x82aefa24.
//
// Solidity: function ISSUER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) ISSUERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "ISSUER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ISSUERROLE is a free data retrieval call binding the contract method 0x82aefa24.
//
// Solidity: function ISSUER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) ISSUERROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.ISSUERROLE(&_ClaimsVerifier.CallOpts)
}

// ISSUERROLE is a free data retrieval call binding the contract method 0x82aefa24.
//
// Solidity: function ISSUER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) ISSUERROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.ISSUERROLE(&_ClaimsVerifier.CallOpts)
}

// SIGNERROLE is a free data retrieval call binding the contract method 0xa1ebf35d.
//
// Solidity: function SIGNER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) SIGNERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "SIGNER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SIGNERROLE is a free data retrieval call binding the contract method 0xa1ebf35d.
//
// Solidity: function SIGNER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) SIGNERROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.SIGNERROLE(&_ClaimsVerifier.CallOpts)
}

// SIGNERROLE is a free data retrieval call binding the contract method 0xa1ebf35d.
//
// Solidity: function SIGNER_ROLE() view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) SIGNERROLE() ([32]byte, error) {
	return _ClaimsVerifier.Contract.SIGNERROLE(&_ClaimsVerifier.CallOpts)
}

// CredentialHash is a free data retrieval call binding the contract method 0x0de5ed7c.
//
// Solidity: function credentialHash((address,address,bytes32,uint256,uint256) vc) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) CredentialHash(opts *bind.CallOpts, vc ClaimTypesVerifiableCredential[P]) ([32]byte, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "credentialHash", vc)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CredentialHash is a free data retrieval call binding the contract method 0x0de5ed7c.
//
// Solidity: function credentialHash((address,address,bytes32,uint256,uint256) vc) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) CredentialHash(vc ClaimTypesVerifiableCredential[P]) ([32]byte, error) {
	return _ClaimsVerifier.Contract.CredentialHash(&_ClaimsVerifier.CallOpts, vc)
}

// CredentialHash is a free data retrieval call binding the contract method 0x0de5ed7c.
//
// Solidity: function credentialHash((address,address,bytes32,uint256,uint256) vc) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) CredentialHash(vc ClaimTypesVerifiableCredential[P]) ([32]byte, error) {
	return _ClaimsVerifier.Contract.CredentialHash(&_ClaimsVerifier.CallOpts, vc)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ClaimsVerifier.Contract.GetRoleAdmin(&_ClaimsVerifier.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ClaimsVerifier.Contract.GetRoleAdmin(&_ClaimsVerifier.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _ClaimsVerifier.Contract.GetRoleMember(&_ClaimsVerifier.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _ClaimsVerifier.Contract.GetRoleMember(&_ClaimsVerifier.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _ClaimsVerifier.Contract.GetRoleMemberCount(&_ClaimsVerifier.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _ClaimsVerifier.Contract.GetRoleMemberCount(&_ClaimsVerifier.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ClaimsVerifier.Contract.HasRole(&_ClaimsVerifier.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ClaimsVerifier.Contract.HasRole(&_ClaimsVerifier.CallOpts, role, account)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ClaimsVerifier.Contract.SupportsInterface(&_ClaimsVerifier.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ClaimsVerifier.Contract.SupportsInterface(&_ClaimsVerifier.CallOpts, interfaceId)
}

// VerifyCredential is a free data retrieval call binding the contract method 0x0d60c469.
//
// Solidity: function verifyCredential((address,address,bytes32,uint256,uint256) vc, uint8 v, bytes32 r, bytes32 s) view returns(bool, bool, bool, bool, bool)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) VerifyCredential(opts *bind.CallOpts, vc ClaimTypesVerifiableCredential[P], v uint8, r [32]byte, s [32]byte) (bool, bool, bool, bool, bool, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "verifyCredential", vc, v, r, s)

	if err != nil {
		return *new(bool), *new(bool), *new(bool), *new(bool), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new(bool)).(*bool)
	out3 := *abi.ConvertType(out[3], new(bool)).(*bool)
	out4 := *abi.ConvertType(out[4], new(bool)).(*bool)

	return out0, out1, out2, out3, out4, err

}

// VerifyCredential is a free data retrieval call binding the contract method 0x0d60c469.
//
// Solidity: function verifyCredential((address,address,bytes32,uint256,uint256) vc, uint8 v, bytes32 r, bytes32 s) view returns(bool, bool, bool, bool, bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) VerifyCredential(vc ClaimTypesVerifiableCredential[P], v uint8, r [32]byte, s [32]byte) (bool, bool, bool, bool, bool, error) {
	return _ClaimsVerifier.Contract.VerifyCredential(&_ClaimsVerifier.CallOpts, vc, v, r, s)
}

// VerifyCredential is a free data retrieval call binding the contract method 0x0d60c469.
//
// Solidity: function verifyCredential((address,address,bytes32,uint256,uint256) vc, uint8 v, bytes32 r, bytes32 s) view returns(bool, bool, bool, bool, bool)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) VerifyCredential(vc ClaimTypesVerifiableCredential[P], v uint8, r [32]byte, s [32]byte) (bool, bool, bool, bool, bool, error) {
	return _ClaimsVerifier.Contract.VerifyCredential(&_ClaimsVerifier.CallOpts, vc, v, r, s)
}

// VerifySigner is a free data retrieval call binding the contract method 0x86e82724.
//
// Solidity: function verifySigner((address,address,bytes32,uint256,uint256) vc, bytes _signature) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCaller[P]) VerifySigner(opts *bind.CallOpts, vc ClaimTypesVerifiableCredential[P], _signature []byte) (bool, error) {
	var out []interface{}
	err := _ClaimsVerifier.contract.Call(opts, &out, "verifySigner", vc, _signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifySigner is a free data retrieval call binding the contract method 0x86e82724.
//
// Solidity: function verifySigner((address,address,bytes32,uint256,uint256) vc, bytes _signature) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) VerifySigner(vc ClaimTypesVerifiableCredential[P], _signature []byte) (bool, error) {
	return _ClaimsVerifier.Contract.VerifySigner(&_ClaimsVerifier.CallOpts, vc, _signature)
}

// VerifySigner is a free data retrieval call binding the contract method 0x86e82724.
//
// Solidity: function verifySigner((address,address,bytes32,uint256,uint256) vc, bytes _signature) view returns(bool)
func (_ClaimsVerifier *ClaimsVerifierCallerSession[P]) VerifySigner(vc ClaimTypesVerifiableCredential[P], _signature []byte) (bool, error) {
	return _ClaimsVerifier.Contract.VerifySigner(&_ClaimsVerifier.CallOpts, vc, _signature)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactor[P]) GrantRole(opts *bind.TransactOpts[P], role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierSession[P]) GrantRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.GrantRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactorSession[P]) GrantRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.GrantRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// RegisterCredential is a paid mutator transaction binding the contract method 0x9137ebec.
//
// Solidity: function registerCredential(address _subject, bytes32 _credentialHash, uint256 _from, uint256 _exp, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierTransactor[P]) RegisterCredential(opts *bind.TransactOpts[P], _subject common.Address, _credentialHash [32]byte, _from *big.Int, _exp *big.Int, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.contract.Transact(opts, "registerCredential", _subject, _credentialHash, _from, _exp, _signature)
}

// RegisterCredential is a paid mutator transaction binding the contract method 0x9137ebec.
//
// Solidity: function registerCredential(address _subject, bytes32 _credentialHash, uint256 _from, uint256 _exp, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) RegisterCredential(_subject common.Address, _credentialHash [32]byte, _from *big.Int, _exp *big.Int, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RegisterCredential(&_ClaimsVerifier.TransactOpts, _subject, _credentialHash, _from, _exp, _signature)
}

// RegisterCredential is a paid mutator transaction binding the contract method 0x9137ebec.
//
// Solidity: function registerCredential(address _subject, bytes32 _credentialHash, uint256 _from, uint256 _exp, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierTransactorSession[P]) RegisterCredential(_subject common.Address, _credentialHash [32]byte, _from *big.Int, _exp *big.Int, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RegisterCredential(&_ClaimsVerifier.TransactOpts, _subject, _credentialHash, _from, _exp, _signature)
}

// RegisterSignature is a paid mutator transaction binding the contract method 0x448684ac.
//
// Solidity: function registerSignature(bytes32 _credentialHash, address issuer, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierTransactor[P]) RegisterSignature(opts *bind.TransactOpts[P], _credentialHash [32]byte, issuer common.Address, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.contract.Transact(opts, "registerSignature", _credentialHash, issuer, _signature)
}

// RegisterSignature is a paid mutator transaction binding the contract method 0x448684ac.
//
// Solidity: function registerSignature(bytes32 _credentialHash, address issuer, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierSession[P]) RegisterSignature(_credentialHash [32]byte, issuer common.Address, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RegisterSignature(&_ClaimsVerifier.TransactOpts, _credentialHash, issuer, _signature)
}

// RegisterSignature is a paid mutator transaction binding the contract method 0x448684ac.
//
// Solidity: function registerSignature(bytes32 _credentialHash, address issuer, bytes _signature) returns(bool)
func (_ClaimsVerifier *ClaimsVerifierTransactorSession[P]) RegisterSignature(_credentialHash [32]byte, issuer common.Address, _signature []byte) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RegisterSignature(&_ClaimsVerifier.TransactOpts, _credentialHash, issuer, _signature)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactor[P]) RenounceRole(opts *bind.TransactOpts[P], role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierSession[P]) RenounceRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RenounceRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactorSession[P]) RenounceRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RenounceRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactor[P]) RevokeRole(opts *bind.TransactOpts[P], role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierSession[P]) RevokeRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RevokeRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ClaimsVerifier *ClaimsVerifierTransactorSession[P]) RevokeRole(role [32]byte, account common.Address) (*types.Transaction[P], error) {
	return _ClaimsVerifier.Contract.RevokeRole(&_ClaimsVerifier.TransactOpts, role, account)
}

// ClaimsVerifierRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleAdminChangedIterator[P crypto.PublicKey] struct {
	Event *ClaimsVerifierRoleAdminChanged[P] // Event containing the contract specifics and raw log

	contract *bind.BoundContract[P] // Generic contract to use for unpacking event data
	event    string                 // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClaimsVerifierRoleAdminChangedIterator[P]) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClaimsVerifierRoleAdminChanged[P])
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClaimsVerifierRoleAdminChanged[P])
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClaimsVerifierRoleAdminChangedIterator[P]) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClaimsVerifierRoleAdminChangedIterator[P]) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClaimsVerifierRoleAdminChanged represents a RoleAdminChanged event raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleAdminChanged[P crypto.PublicKey] struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*ClaimsVerifierRoleAdminChangedIterator[P], error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierRoleAdminChangedIterator[P]{contract: _ClaimsVerifier.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

var RoleAdminChangedTopicHash = "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff"

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *ClaimsVerifierRoleAdminChanged[P], role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClaimsVerifierRoleAdminChanged[P])
				if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) ParseRoleAdminChanged(log types.Log) (*ClaimsVerifierRoleAdminChanged[P], error) {
	event := new(ClaimsVerifierRoleAdminChanged[P])
	if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClaimsVerifierRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleGrantedIterator[P crypto.PublicKey] struct {
	Event *ClaimsVerifierRoleGranted[P] // Event containing the contract specifics and raw log

	contract *bind.BoundContract[P] // Generic contract to use for unpacking event data
	event    string                 // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClaimsVerifierRoleGrantedIterator[P]) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClaimsVerifierRoleGranted[P])
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClaimsVerifierRoleGranted[P])
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClaimsVerifierRoleGrantedIterator[P]) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClaimsVerifierRoleGrantedIterator[P]) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClaimsVerifierRoleGranted represents a RoleGranted event raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleGranted[P crypto.PublicKey] struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ClaimsVerifierRoleGrantedIterator[P], error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierRoleGrantedIterator[P]{contract: _ClaimsVerifier.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

var RoleGrantedTopicHash = "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d"

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ClaimsVerifierRoleGranted[P], role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClaimsVerifierRoleGranted[P])
				if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) ParseRoleGranted(log types.Log) (*ClaimsVerifierRoleGranted[P], error) {
	event := new(ClaimsVerifierRoleGranted[P])
	if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ClaimsVerifierRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleRevokedIterator[P crypto.PublicKey] struct {
	Event *ClaimsVerifierRoleRevoked[P] // Event containing the contract specifics and raw log

	contract *bind.BoundContract[P] // Generic contract to use for unpacking event data
	event    string                 // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClaimsVerifierRoleRevokedIterator[P]) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClaimsVerifierRoleRevoked[P])
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClaimsVerifierRoleRevoked[P])
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClaimsVerifierRoleRevokedIterator[P]) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClaimsVerifierRoleRevokedIterator[P]) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClaimsVerifierRoleRevoked represents a RoleRevoked event raised by the ClaimsVerifier contract.
type ClaimsVerifierRoleRevoked[P crypto.PublicKey] struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ClaimsVerifierRoleRevokedIterator[P], error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ClaimsVerifierRoleRevokedIterator[P]{contract: _ClaimsVerifier.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

var RoleRevokedTopicHash = "0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b"

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ClaimsVerifierRoleRevoked[P], role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ClaimsVerifier.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClaimsVerifierRoleRevoked[P])
				if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ClaimsVerifier *ClaimsVerifierFilterer[P]) ParseRoleRevoked(log types.Log) (*ClaimsVerifierRoleRevoked[P], error) {
	event := new(ClaimsVerifierRoleRevoked[P])
	if err := _ClaimsVerifier.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
